# Generated from D:/projects/python/vul detect/tools/CppCodeAnalyzer/resources\CPP14.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0090")
        buf.write("\u09b0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\3\2\5\2\u0198\n\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u01a4\n\3\3\4\3\4\5\4")
        buf.write("\u01a8\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u01b3")
        buf.write("\n\5\3\6\3\6\5\6\u01b7\n\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c6\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u01cd\n\7\3\7\3\7\3\7\7\7\u01d2\n\7\f\7\16\7")
        buf.write("\u01d5\13\7\3\b\3\b\5\b\u01d9\n\b\3\b\3\b\3\t\3\t\5\t")
        buf.write("\u01df\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u01e9\n")
        buf.write("\n\3\13\3\13\3\f\3\f\3\f\5\f\u01f0\n\f\3\f\3\f\3\f\3\f")
        buf.write("\5\f\u01f6\n\f\7\f\u01f8\n\f\f\f\16\f\u01fb\13\f\3\r\3")
        buf.write("\r\5\r\u01ff\n\r\3\16\3\16\3\16\3\16\5\16\u0205\n\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u020c\n\17\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u0212\n\20\3\20\5\20\u0215\n\20\3\20\5\20\u0218")
        buf.write("\n\20\3\20\5\20\u021b\n\20\3\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0222\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u0229\n\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u025d\n\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u026c\n\21\3\21\3\21\3\21\3\21\5\21\u0272\n")
        buf.write("\21\3\21\3\21\3\21\3\21\5\21\u0278\n\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0285\n")
        buf.write("\21\f\21\16\21\u0288\13\21\3\22\3\22\3\23\5\23\u028d\n")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u029c\n\23\3\23\3\23\3\23\3\23\5")
        buf.write("\23\u02a2\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\5\24\u02b1\n\24\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u02bf\n\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30\5")
        buf.write("\30\u02c9\n\30\3\30\3\30\5\30\u02cd\n\30\3\30\3\30\5\30")
        buf.write("\u02d1\n\30\3\30\5\30\u02d4\n\30\3\30\3\30\5\30\u02d8")
        buf.write("\n\30\3\30\3\30\3\30\3\30\5\30\u02de\n\30\5\30\u02e0\n")
        buf.write("\30\3\31\3\31\3\31\3\31\3\32\3\32\5\32\u02e8\n\32\3\33")
        buf.write("\3\33\5\33\u02ec\n\33\3\33\5\33\u02ef\n\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\5\34\u02f6\n\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u02fd\n\34\7\34\u02ff\n\34\f\34\16\34\u0302\13\34")
        buf.write("\3\35\3\35\5\35\u0306\n\35\3\35\3\35\5\35\u030a\n\35\3")
        buf.write("\36\5\36\u030d\n\36\3\36\3\36\3\36\5\36\u0312\n\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u0318\n\36\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3 \3 \3 \3 \3 \3 \5 \u0325\n \3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\7!\u0330\n!\f!\16!\u0333\13!\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0341\n\"\f\"\16\"")
        buf.write("\u0344\13\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u034f\n#\f#")
        buf.write("\16#\u0352\13#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$\u035e")
        buf.write("\n$\f$\16$\u0361\13$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write("\3%\3%\3%\3%\7%\u0372\n%\f%\16%\u0375\13%\3&\3&\3&\3&")
        buf.write("\3&\3&\3&\3&\3&\7&\u0380\n&\f&\16&\u0383\13&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\7\'\u038b\n\'\f\'\16\'\u038e\13\'\3(\3")
        buf.write("(\3(\3(\3(\3(\7(\u0396\n(\f(\16(\u0399\13(\3)\3)\3)\3")
        buf.write(")\3)\3)\7)\u03a1\n)\f)\16)\u03a4\13)\3*\3*\3*\3*\3*\3")
        buf.write("*\7*\u03ac\n*\f*\16*\u03af\13*\3+\3+\3+\3+\3+\3+\7+\u03b7")
        buf.write("\n+\f+\16+\u03ba\13+\3,\3,\3,\3,\3,\3,\3,\5,\u03c3\n,")
        buf.write("\3-\3-\3-\3-\3-\3-\5-\u03cb\n-\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u03d8\n.\3/\3/\3/\3/\3/\3/\7/\u03e0\n/\f")
        buf.write("/\16/\u03e3\13/\3\60\3\60\3\61\3\61\5\61\u03e9\n\61\3")
        buf.write("\61\3\61\5\61\u03ed\n\61\3\61\3\61\5\61\u03f1\n\61\3\61")
        buf.write("\3\61\5\61\u03f5\n\61\3\61\3\61\5\61\u03f9\n\61\3\61\3")
        buf.write("\61\3\61\5\61\u03fe\n\61\3\61\5\61\u0401\n\61\3\62\5\62")
        buf.write("\u0404\n\62\3\62\3\62\3\62\5\62\u0409\n\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\5\62\u0410\n\62\3\62\3\62\5\62\u0414\n\62")
        buf.write("\3\63\3\63\3\63\3\64\5\64\u041a\n\64\3\64\3\64\3\65\3")
        buf.write("\65\5\65\u0420\n\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66")
        buf.write("\7\66\u0429\n\66\f\66\16\66\u042c\13\66\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0442\n\67\38\38\5")
        buf.write("8\u0446\n8\38\38\38\38\38\38\58\u044e\n8\38\38\38\38\5")
        buf.write("8\u0454\n8\39\39\39\39\39\39\39\39\39\39\39\39\39\39\3")
        buf.write("9\39\39\39\59\u0468\n9\39\39\59\u046c\n9\39\39\39\39\3")
        buf.write("9\39\39\39\39\39\39\59\u0479\n9\3:\3:\5:\u047d\n:\3;\5")
        buf.write(";\u0480\n;\3;\3;\3;\3<\3<\5<\u0487\n<\3=\3=\3=\3=\3=\3")
        buf.write("=\5=\u048f\n=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0499\n=\3>\3")
        buf.write(">\3?\3?\3?\3?\3?\7?\u04a2\n?\f?\16?\u04a5\13?\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\5@\u04b0\n@\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\5A\u04ba\nA\3B\3B\3B\5B\u04bf\nB\3B\3B\3B\3B\3C\5C\u04c6")
        buf.write("\nC\3C\5C\u04c9\nC\3C\3C\3C\5C\u04ce\nC\3C\3C\3C\5C\u04d3")
        buf.write("\nC\3D\3D\3D\3D\3D\3D\3D\3D\3E\3E\3F\3F\3F\3G\3G\3G\3")
        buf.write("G\3G\3G\5G\u04e8\nG\3H\3H\5H\u04ec\nH\3H\3H\3H\5H\u04f1")
        buf.write("\nH\3I\3I\3J\3J\3K\3K\3L\3L\3L\5L\u04fc\nL\3M\3M\3M\3")
        buf.write("M\5M\u0502\nM\3N\3N\5N\u0506\nN\3N\3N\3N\5N\u050b\nN\3")
        buf.write("O\3O\5O\u050f\nO\3O\3O\3O\5O\u0514\nO\3P\5P\u0517\nP\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\5P\u052d\nP\3Q\3Q\3Q\3Q\5Q\u0533\nQ\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\5R\u053e\nR\3S\3S\5S\u0542\nS\3S\5S\u0545")
        buf.write("\nS\3S\3S\3S\3S\3S\3S\3S\3S\5S\u054f\nS\3S\3S\3S\3S\5")
        buf.write("S\u0555\nS\3S\5S\u0558\nS\3T\3T\3U\3U\3U\5U\u055f\nU\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\5U\u0569\nU\3V\3V\5V\u056d\nV\3")
        buf.write("V\5V\u0570\nV\3V\5V\u0573\nV\3V\3V\5V\u0577\nV\3V\3V\3")
        buf.write("V\5V\u057c\nV\5V\u057e\nV\3W\3W\5W\u0582\nW\3W\3W\5W\u0586")
        buf.write("\nW\3W\3W\3X\3X\3X\3X\3X\5X\u058f\nX\3Y\3Y\3Y\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\7Z\u059a\nZ\fZ\16Z\u059d\13Z\3[\3[\3[\3[\3")
        buf.write("[\5[\u05a4\n[\3\\\3\\\3]\3]\5]\u05aa\n]\3^\3^\3_\3_\5")
        buf.write("_\u05b0\n_\3`\3`\5`\u05b4\n`\3a\5a\u05b7\na\3a\3a\3a\3")
        buf.write("a\3a\3a\3b\5b\u05c0\nb\3b\3b\3b\3b\3b\3b\3c\5c\u05c9\n")
        buf.write("c\3c\3c\3c\3c\3c\3d\5d\u05d1\nd\3e\3e\3f\3f\3f\3f\3f\3")
        buf.write("f\3g\5g\u05dc\ng\3g\3g\3h\3h\5h\u05e2\nh\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\5h\u05ed\nh\3i\5i\u05f0\ni\3i\3i\3i\5i\u05f5")
        buf.write("\ni\3i\3i\3i\3j\3j\3j\3j\3j\3j\3k\3k\3k\3k\5k\u0604\n")
        buf.write("k\3k\3k\3k\3k\5k\u060a\nk\3l\3l\3l\3l\3l\7l\u0611\nl\f")
        buf.write("l\16l\u0614\13l\3m\3m\3m\3m\3m\3m\3m\5m\u061d\nm\3n\3")
        buf.write("n\3n\3n\5n\u0623\nn\3n\3n\3n\3n\3n\3n\5n\u062b\nn\3n\3")
        buf.write("n\5n\u062f\nn\3o\3o\5o\u0633\no\3o\3o\3o\5o\u0638\no\3")
        buf.write("o\3o\3o\5o\u063d\no\3o\3o\3o\3o\3o\7o\u0644\no\fo\16o")
        buf.write("\u0647\13o\3p\3p\5p\u064b\np\3q\3q\5q\u064f\nq\3r\3r\3")
        buf.write("r\3r\3s\3s\3t\3t\3t\3t\3u\3u\5u\u065d\nu\3u\3u\7u\u0661")
        buf.write("\nu\fu\16u\u0664\13u\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v")
        buf.write("\3v\5v\u0672\nv\3w\3w\3w\3w\3w\3w\7w\u067a\nw\fw\16w\u067d")
        buf.write("\13w\3x\3x\5x\u0681\nx\3y\3y\3y\3y\3y\5y\u0688\ny\3z\3")
        buf.write("z\3z\3z\5z\u068e\nz\3{\3{\3{\5{\u0693\n{\3{\3{\3{\3{\5")
        buf.write("{\u0699\n{\3{\3{\3{\3{\3{\5{\u06a0\n{\3{\3{\5{\u06a4\n")
        buf.write("{\7{\u06a6\n{\f{\16{\u06a9\13{\3|\3|\3|\3|\5|\u06af\n")
        buf.write("|\3|\5|\u06b2\n|\3|\5|\u06b5\n|\3|\5|\u06b8\n|\3}\3}\3")
        buf.write("}\5}\u06bd\n}\3~\3~\5~\u06c1\n~\3~\5~\u06c4\n~\3~\3~\5")
        buf.write("~\u06c8\n~\3~\3~\5~\u06cc\n~\3~\3~\3~\5~\u06d1\n~\3~\5")
        buf.write("~\u06d4\n~\5~\u06d6\n~\3\177\3\177\5\177\u06da\n\177\3")
        buf.write("\u0080\3\u0080\3\u0081\3\u0081\3\u0082\5\u0082\u06e1\n")
        buf.write("\u0082\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u06e7\n")
        buf.write("\u0083\3\u0084\3\u0084\5\u0084\u06eb\n\u0084\3\u0084\3")
        buf.write("\u0084\3\u0084\3\u0084\5\u0084\u06f1\n\u0084\3\u0085\3")
        buf.write("\u0085\3\u0085\5\u0085\u06f6\n\u0085\5\u0085\u06f8\n\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u06fe\n\u0086")
        buf.write("\3\u0086\3\u0086\5\u0086\u0702\n\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\5\u0086\u0708\n\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\5\u0086\u070f\n\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0713\n\u0086\7\u0086\u0715\n\u0086\f")
        buf.write("\u0086\16\u0086\u0718\13\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\5\u0087\u071e\n\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0728")
        buf.write("\n\u0088\3\u0088\3\u0088\5\u0088\u072c\n\u0088\7\u0088")
        buf.write("\u072e\n\u0088\f\u0088\16\u0088\u0731\13\u0088\3\u0089")
        buf.write("\5\u0089\u0734\n\u0089\3\u0089\5\u0089\u0737\n\u0089\3")
        buf.write("\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u073d\n\u0089\3")
        buf.write("\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a")
        buf.write("\u0745\n\u008a\f\u008a\16\u008a\u0748\13\u008a\3\u008b")
        buf.write("\5\u008b\u074b\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\5\u008b\u0751\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\5\u008b\u0759\n\u008b\3\u008b\3\u008b")
        buf.write("\5\u008b\u075d\n\u008b\3\u008b\5\u008b\u0760\n\u008b\3")
        buf.write("\u008b\3\u008b\5\u008b\u0764\n\u008b\3\u008b\3\u008b\3")
        buf.write("\u008b\5\u008b\u0769\n\u008b\3\u008c\5\u008c\u076c\n\u008c")
        buf.write("\3\u008c\5\u008c\u076f\n\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u0773\n\u008c\3\u008c\3\u008c\3\u008d\5\u008d\u0778\n")
        buf.write("\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0782\n\u008d\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\5\u008e\u0789\n\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u078e\n\u008f\3\u0090\3\u0090")
        buf.write("\5\u0090\u0792\n\u0090\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u0797\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u079d\n\u0091\7\u0091\u079f\n\u0091\f\u0091\16\u0091")
        buf.write("\u07a2\13\u0091\3\u0092\3\u0092\3\u0092\5\u0092\u07a7")
        buf.write("\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u07ad")
        buf.write("\n\u0092\3\u0093\3\u0093\5\u0093\u07b1\n\u0093\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u07b6\n\u0094\3\u0094\3\u0094")
        buf.write("\3\u0095\3\u0095\5\u0095\u07bc\n\u0095\3\u0095\3\u0095")
        buf.write("\5\u0095\u07c0\n\u0095\3\u0095\5\u0095\u07c3\n\u0095\3")
        buf.write("\u0095\3\u0095\5\u0095\u07c7\n\u0095\3\u0095\5\u0095\u07ca")
        buf.write("\n\u0095\5\u0095\u07cc\n\u0095\3\u0096\5\u0096\u07cf\n")
        buf.write("\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0098\3\u0098")
        buf.write("\3\u0099\3\u0099\5\u0099\u07d9\n\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\5\u0099\u07de\n\u0099\5\u0099\u07e0\n\u0099\3")
        buf.write("\u009a\5\u009a\u07e3\n\u009a\3\u009a\5\u009a\u07e6\n\u009a")
        buf.write("\3\u009a\5\u009a\u07e9\n\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u07f2\n\u009a")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b")
        buf.write("\u07fa\n\u009b\f\u009b\16\u009b\u07fd\13\u009b\3\u009c")
        buf.write("\3\u009c\5\u009c\u0801\n\u009c\3\u009c\5\u009c\u0804\n")
        buf.write("\u009c\3\u009c\3\u009c\5\u009c\u0808\n\u009c\3\u009c\5")
        buf.write("\u009c\u080b\n\u009c\3\u009c\5\u009c\u080e\n\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0812\n\u009c\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\7\u009d\u0819\n\u009d\f\u009d\16\u009d")
        buf.write("\u081c\13\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u082a\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0830\n\u00a1\7\u00a1\u0832\n\u00a1\f\u00a1\16")
        buf.write("\u00a1\u0835\13\u00a1\3\u00a2\5\u00a2\u0838\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\5\u00a2\u083c\n\u00a2\3\u00a2\3\u00a2\5")
        buf.write("\u00a2\u0840\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0844\n\u00a2")
        buf.write("\3\u00a2\3\u00a2\5\u00a2\u0848\n\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u084c\n\u00a2\3\u00a3\5\u00a3\u084f\n\u00a3\3")
        buf.write("\u00a3\3\u00a3\5\u00a3\u0853\n\u00a3\3\u00a4\3\u00a4\3")
        buf.write("\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7")
        buf.write("\5\u00a7\u085e\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0862\n")
        buf.write("\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0869\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u086d\n\u00aa\3")
        buf.write("\u00aa\3\u00aa\3\u00aa\5\u00aa\u0872\n\u00aa\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\5\u00ab\u0877\n\u00ab\3\u00ab\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\3\u00ab\5\u00ab\u087e\n\u00ab\3\u00ac\3")
        buf.write("\u00ac\5\u00ac\u0882\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3")
        buf.write("\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u088c\n")
        buf.write("\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0")
        buf.write("\u089a\n\u00b0\f\u00b0\16\u00b0\u089d\13\u00b0\3\u00b1")
        buf.write("\3\u00b1\5\u00b1\u08a1\n\u00b1\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u08a5\n\u00b2\3\u00b2\5\u00b2\u08a8\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\5\u00b2\u08ac\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3")
        buf.write("\u00b2\5\u00b2\u08b2\n\u00b2\3\u00b2\5\u00b2\u08b5\n\u00b2")
        buf.write("\3\u00b2\3\u00b2\5\u00b2\u08b9\n\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u08c3\n\u00b2\3\u00b2\5\u00b2\u08c6\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u08ce\n")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u08d3\n\u00b2\3")
        buf.write("\u00b3\3\u00b3\3\u00b3\5\u00b3\u08d8\n\u00b3\3\u00b3\3")
        buf.write("\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u08e0\n")
        buf.write("\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u08e7\n\u00b4\3\u00b4\3\u00b4\5\u00b4\u08eb\n\u00b4\3")
        buf.write("\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u08f2\n")
        buf.write("\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u08f8\n")
        buf.write("\u00b6\7\u00b6\u08fa\n\u00b6\f\u00b6\16\u00b6\u08fd\13")
        buf.write("\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0902\n\u00b7\3")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\5\u00b8\u090b\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u090f\n")
        buf.write("\u00b8\3\u00b9\5\u00b9\u0912\n\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\5\u00bc\u0922")
        buf.write("\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\5\u00bd")
        buf.write("\u0929\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00bf\5\u00bf\u0932\n\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\5\u00bf\u0938\n\u00bf\3\u00bf\3\u00bf")
        buf.write("\5\u00bf\u093c\n\u00bf\3\u00bf\5\u00bf\u093f\n\u00bf\3")
        buf.write("\u00c0\3\u00c0\5\u00c0\u0943\n\u00c0\3\u00c1\3\u00c1\5")
        buf.write("\u00c1\u0947\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u094c")
        buf.write("\n\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3")
        buf.write("\u0953\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3")
        buf.write("\u0959\n\u00c3\7\u00c3\u095b\n\u00c3\f\u00c3\16\u00c3")
        buf.write("\u095e\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\5\u00c4\u0966\n\u00c4\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u099f\n\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8")
        buf.write("\u09a8\n\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\2$\f\26 \66@BDFHJLNPRT\\j|\u00b2\u00d6")
        buf.write("\u00dc\u00e8\u00ec\u00f4\u010a\u010e\u0112\u0120\u0134")
        buf.write("\u0138\u0140\u015e\u016a\u0184\u00cc\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118")
        buf.write("\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a")
        buf.write("\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c")
        buf.write("\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e")
        buf.write("\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160")
        buf.write("\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172")
        buf.write("\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184")
        buf.write("\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\2\r\4")
        buf.write("\2\\\\``\4\2VX\\_\7\2\37\37**\64\64::AA\5\2\35\35\'\'")
        buf.write("KK\4\2\21\21MM\4\2\\\\qq\5\2\20\20==HH\4\2!!\60\60\3\2")
        buf.write("\61\63\4\2  CC\3\2\u0089\u008c\2\u0ace\2\u0197\3\2\2\2")
        buf.write("\4\u01a3\3\2\2\2\6\u01a7\3\2\2\2\b\u01b2\3\2\2\2\n\u01b4")
        buf.write("\3\2\2\2\f\u01c5\3\2\2\2\16\u01d6\3\2\2\2\20\u01dc\3\2")
        buf.write("\2\2\22\u01e8\3\2\2\2\24\u01ea\3\2\2\2\26\u01ec\3\2\2")
        buf.write("\2\30\u01fe\3\2\2\2\32\u0204\3\2\2\2\34\u020b\3\2\2\2")
        buf.write("\36\u020d\3\2\2\2 \u025c\3\2\2\2\"\u0289\3\2\2\2$\u02a1")
        buf.write("\3\2\2\2&\u02b0\3\2\2\2(\u02be\3\2\2\2*\u02c0\3\2\2\2")
        buf.write(",\u02c5\3\2\2\2.\u02df\3\2\2\2\60\u02e1\3\2\2\2\62\u02e5")
        buf.write("\3\2\2\2\64\u02ee\3\2\2\2\66\u02f0\3\2\2\28\u0309\3\2")
        buf.write("\2\2:\u0317\3\2\2\2<\u0319\3\2\2\2>\u0324\3\2\2\2@\u0326")
        buf.write("\3\2\2\2B\u0334\3\2\2\2D\u0345\3\2\2\2F\u0353\3\2\2\2")
        buf.write("H\u0362\3\2\2\2J\u0376\3\2\2\2L\u0384\3\2\2\2N\u038f\3")
        buf.write("\2\2\2P\u039a\3\2\2\2R\u03a5\3\2\2\2T\u03b0\3\2\2\2V\u03c2")
        buf.write("\3\2\2\2X\u03ca\3\2\2\2Z\u03d7\3\2\2\2\\\u03d9\3\2\2\2")
        buf.write("^\u03e4\3\2\2\2`\u0400\3\2\2\2b\u0413\3\2\2\2d\u0415\3")
        buf.write("\2\2\2f\u0419\3\2\2\2h\u041d\3\2\2\2j\u0423\3\2\2\2l\u0441")
        buf.write("\3\2\2\2n\u0453\3\2\2\2p\u0478\3\2\2\2r\u047c\3\2\2\2")
        buf.write("t\u047f\3\2\2\2v\u0486\3\2\2\2x\u0498\3\2\2\2z\u049a\3")
        buf.write("\2\2\2|\u049c\3\2\2\2~\u04af\3\2\2\2\u0080\u04b9\3\2\2")
        buf.write("\2\u0082\u04bb\3\2\2\2\u0084\u04d2\3\2\2\2\u0086\u04d4")
        buf.write("\3\2\2\2\u0088\u04dc\3\2\2\2\u008a\u04de\3\2\2\2\u008c")
        buf.write("\u04e7\3\2\2\2\u008e\u04f0\3\2\2\2\u0090\u04f2\3\2\2\2")
        buf.write("\u0092\u04f4\3\2\2\2\u0094\u04f6\3\2\2\2\u0096\u04fb\3")
        buf.write("\2\2\2\u0098\u0501\3\2\2\2\u009a\u050a\3\2\2\2\u009c\u0513")
        buf.write("\3\2\2\2\u009e\u052c\3\2\2\2\u00a0\u0532\3\2\2\2\u00a2")
        buf.write("\u053d\3\2\2\2\u00a4\u0557\3\2\2\2\u00a6\u0559\3\2\2\2")
        buf.write("\u00a8\u0568\3\2\2\2\u00aa\u057d\3\2\2\2\u00ac\u057f\3")
        buf.write("\2\2\2\u00ae\u058e\3\2\2\2\u00b0\u0590\3\2\2\2\u00b2\u0593")
        buf.write("\3\2\2\2\u00b4\u05a3\3\2\2\2\u00b6\u05a5\3\2\2\2\u00b8")
        buf.write("\u05a9\3\2\2\2\u00ba\u05ab\3\2\2\2\u00bc\u05af\3\2\2\2")
        buf.write("\u00be\u05b3\3\2\2\2\u00c0\u05b6\3\2\2\2\u00c2\u05bf\3")
        buf.write("\2\2\2\u00c4\u05c8\3\2\2\2\u00c6\u05d0\3\2\2\2\u00c8\u05d2")
        buf.write("\3\2\2\2\u00ca\u05d4\3\2\2\2\u00cc\u05db\3\2\2\2\u00ce")
        buf.write("\u05ec\3\2\2\2\u00d0\u05ef\3\2\2\2\u00d2\u05f9\3\2\2\2")
        buf.write("\u00d4\u0609\3\2\2\2\u00d6\u060b\3\2\2\2\u00d8\u061c\3")
        buf.write("\2\2\2\u00da\u062e\3\2\2\2\u00dc\u0637\3\2\2\2\u00de\u0648")
        buf.write("\3\2\2\2\u00e0\u064e\3\2\2\2\u00e2\u0650\3\2\2\2\u00e4")
        buf.write("\u0654\3\2\2\2\u00e6\u0656\3\2\2\2\u00e8\u065a\3\2\2\2")
        buf.write("\u00ea\u0671\3\2\2\2\u00ec\u0673\3\2\2\2\u00ee\u067e\3")
        buf.write("\2\2\2\u00f0\u0687\3\2\2\2\u00f2\u068d\3\2\2\2\u00f4\u0698")
        buf.write("\3\2\2\2\u00f6\u06aa\3\2\2\2\u00f8\u06b9\3\2\2\2\u00fa")
        buf.write("\u06d5\3\2\2\2\u00fc\u06d7\3\2\2\2\u00fe\u06db\3\2\2\2")
        buf.write("\u0100\u06dd\3\2\2\2\u0102\u06e0\3\2\2\2\u0104\u06e4\3")
        buf.write("\2\2\2\u0106\u06f0\3\2\2\2\u0108\u06f7\3\2\2\2\u010a\u0707")
        buf.write("\3\2\2\2\u010c\u071d\3\2\2\2\u010e\u071f\3\2\2\2\u0110")
        buf.write("\u073c\3\2\2\2\u0112\u073e\3\2\2\2\u0114\u0768\3\2\2\2")
        buf.write("\u0116\u076b\3\2\2\2\u0118\u0781\3\2\2\2\u011a\u0788\3")
        buf.write("\2\2\2\u011c\u078d\3\2\2\2\u011e\u0791\3\2\2\2\u0120\u0793")
        buf.write("\3\2\2\2\u0122\u07ac\3\2\2\2\u0124\u07b0\3\2\2\2\u0126")
        buf.write("\u07b2\3\2\2\2\u0128\u07cb\3\2\2\2\u012a\u07ce\3\2\2\2")
        buf.write("\u012c\u07d2\3\2\2\2\u012e\u07d4\3\2\2\2\u0130\u07df\3")
        buf.write("\2\2\2\u0132\u07f1\3\2\2\2\u0134\u07f3\3\2\2\2\u0136\u0811")
        buf.write("\3\2\2\2\u0138\u0813\3\2\2\2\u013a\u081d\3\2\2\2\u013c")
        buf.write("\u081f\3\2\2\2\u013e\u0823\3\2\2\2\u0140\u0826\3\2\2\2")
        buf.write("\u0142\u084b\3\2\2\2\u0144\u0852\3\2\2\2\u0146\u0854\3")
        buf.write("\2\2\2\u0148\u0856\3\2\2\2\u014a\u0858\3\2\2\2\u014c\u085b")
        buf.write("\3\2\2\2\u014e\u085f\3\2\2\2\u0150\u0863\3\2\2\2\u0152")
        buf.write("\u0871\3\2\2\2\u0154\u087d\3\2\2\2\u0156\u0881\3\2\2\2")
        buf.write("\u0158\u0883\3\2\2\2\u015a\u088b\3\2\2\2\u015c\u088d\3")
        buf.write("\2\2\2\u015e\u0893\3\2\2\2\u0160\u08a0\3\2\2\2\u0162\u08d2")
        buf.write("\3\2\2\2\u0164\u08d4\3\2\2\2\u0166\u08ea\3\2\2\2\u0168")
        buf.write("\u08ec\3\2\2\2\u016a\u08ee\3\2\2\2\u016c\u0901\3\2\2\2")
        buf.write("\u016e\u090e\3\2\2\2\u0170\u0911\3\2\2\2\u0172\u0916\3")
        buf.write("\2\2\2\u0174\u091b\3\2\2\2\u0176\u091f\3\2\2\2\u0178\u0926")
        buf.write("\3\2\2\2\u017a\u092a\3\2\2\2\u017c\u093e\3\2\2\2\u017e")
        buf.write("\u0940\3\2\2\2\u0180\u0946\3\2\2\2\u0182\u0948\3\2\2\2")
        buf.write("\u0184\u094f\3\2\2\2\u0186\u0965\3\2\2\2\u0188\u0967\3")
        buf.write("\2\2\2\u018a\u096a\3\2\2\2\u018c\u099e\3\2\2\2\u018e\u09a7")
        buf.write("\3\2\2\2\u0190\u09a9\3\2\2\2\u0192\u09ab\3\2\2\2\u0194")
        buf.write("\u09ad\3\2\2\2\u0196\u0198\5|?\2\u0197\u0196\3\2\2\2\u0197")
        buf.write("\u0198\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\7\2\2\3")
        buf.write("\u019a\3\3\2\2\2\u019b\u01a4\5\u018e\u00c8\2\u019c\u01a4")
        buf.write("\7@\2\2\u019d\u019e\7P\2\2\u019e\u019f\5\\/\2\u019f\u01a0")
        buf.write("\7Q\2\2\u01a0\u01a4\3\2\2\2\u01a1\u01a4\5\6\4\2\u01a2")
        buf.write("\u01a4\5\16\b\2\u01a3\u019b\3\2\2\2\u01a3\u019c\3\2\2")
        buf.write("\2\u01a3\u019d\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a4\5\3\2\2\2\u01a5\u01a8\5\b\5\2\u01a6\u01a8")
        buf.write("\5\n\6\2\u01a7\u01a5\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8")
        buf.write("\7\3\2\2\2\u01a9\u01b3\7\177\2\2\u01aa\u01b3\5\u0158\u00ad")
        buf.write("\2\u01ab\u01b3\5\u014a\u00a6\2\u01ac\u01b3\5\u015a\u00ae")
        buf.write("\2\u01ad\u01ae\7^\2\2\u01ae\u01b3\5\u0124\u0093\2\u01af")
        buf.write("\u01b0\7^\2\2\u01b0\u01b3\5\u00a2R\2\u01b1\u01b3\5\u0166")
        buf.write("\u00b4\2\u01b2\u01a9\3\2\2\2\u01b2\u01aa\3\2\2\2\u01b2")
        buf.write("\u01ab\3\2\2\2\u01b2\u01ac\3\2\2\2\u01b2\u01ad\3\2\2\2")
        buf.write("\u01b2\u01af\3\2\2\2\u01b2\u01b1\3\2\2\2\u01b3\t\3\2\2")
        buf.write("\2\u01b4\u01b6\5\f\7\2\u01b5\u01b7\7?\2\2\u01b6\u01b5")
        buf.write("\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write("\u01b9\5\b\5\2\u01b9\13\3\2\2\2\u01ba\u01bb\b\7\1\2\u01bb")
        buf.write("\u01c6\7z\2\2\u01bc\u01bd\5\u00a0Q\2\u01bd\u01be\7z\2")
        buf.write("\2\u01be\u01c6\3\2\2\2\u01bf\u01c0\5\u00b8]\2\u01c0\u01c1")
        buf.write("\7z\2\2\u01c1\u01c6\3\2\2\2\u01c2\u01c3\5\u00a2R\2\u01c3")
        buf.write("\u01c4\7z\2\2\u01c4\u01c6\3\2\2\2\u01c5\u01ba\3\2\2\2")
        buf.write("\u01c5\u01bc\3\2\2\2\u01c5\u01bf\3\2\2\2\u01c5\u01c2\3")
        buf.write("\2\2\2\u01c6\u01d3\3\2\2\2\u01c7\u01c8\f\4\2\2\u01c8\u01c9")
        buf.write("\7\177\2\2\u01c9\u01d2\7z\2\2\u01ca\u01cc\f\3\2\2\u01cb")
        buf.write("\u01cd\7?\2\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2")
        buf.write("\u01cd\u01ce\3\2\2\2\u01ce\u01cf\5\u0164\u00b3\2\u01cf")
        buf.write("\u01d0\7z\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01c7\3\2\2\2")
        buf.write("\u01d1\u01ca\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1\3")
        buf.write("\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\r\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d6\u01d8\5\20\t\2\u01d7\u01d9\5\36\20\2\u01d8")
        buf.write("\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01db\5h\65\2\u01db\17\3\2\2\2\u01dc\u01de\7R\2")
        buf.write("\2\u01dd\u01df\5\22\n\2\u01de\u01dd\3\2\2\2\u01de\u01df")
        buf.write("\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\7S\2\2\u01e1")
        buf.write("\21\3\2\2\2\u01e2\u01e9\5\24\13\2\u01e3\u01e9\5\26\f\2")
        buf.write("\u01e4\u01e5\5\24\13\2\u01e5\u01e6\7u\2\2\u01e6\u01e7")
        buf.write("\5\26\f\2\u01e7\u01e9\3\2\2\2\u01e8\u01e2\3\2\2\2\u01e8")
        buf.write("\u01e3\3\2\2\2\u01e8\u01e4\3\2\2\2\u01e9\23\3\2\2\2\u01ea")
        buf.write("\u01eb\t\2\2\2\u01eb\25\3\2\2\2\u01ec\u01ed\b\f\1\2\u01ed")
        buf.write("\u01ef\5\30\r\2\u01ee\u01f0\7~\2\2\u01ef\u01ee\3\2\2\2")
        buf.write("\u01ef\u01f0\3\2\2\2\u01f0\u01f9\3\2\2\2\u01f1\u01f2\f")
        buf.write("\3\2\2\u01f2\u01f3\7u\2\2\u01f3\u01f5\5\30\r\2\u01f4\u01f6")
        buf.write("\7~\2\2\u01f5\u01f4\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6")
        buf.write("\u01f8\3\2\2\2\u01f7\u01f1\3\2\2\2\u01f8\u01fb\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\27\3\2")
        buf.write("\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01ff\5\32\16\2\u01fd\u01ff")
        buf.write("\5\34\17\2\u01fe\u01fc\3\2\2\2\u01fe\u01fd\3\2\2\2\u01ff")
        buf.write("\31\3\2\2\2\u0200\u0205\7\177\2\2\u0201\u0202\7\\\2\2")
        buf.write("\u0202\u0205\7\177\2\2\u0203\u0205\7@\2\2\u0204\u0200")
        buf.write("\3\2\2\2\u0204\u0201\3\2\2\2\u0204\u0203\3\2\2\2\u0205")
        buf.write("\33\3\2\2\2\u0206\u0207\7\177\2\2\u0207\u020c\5\u011a")
        buf.write("\u008e\2\u0208\u0209\7\\\2\2\u0209\u020a\7\177\2\2\u020a")
        buf.write("\u020c\5\u011a\u008e\2\u020b\u0206\3\2\2\2\u020b\u0208")
        buf.write("\3\2\2\2\u020c\35\3\2\2\2\u020d\u020e\7P\2\2\u020e\u020f")
        buf.write("\5\u0110\u0089\2\u020f\u0211\7Q\2\2\u0210\u0212\7*\2\2")
        buf.write("\u0211\u0210\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0214\3")
        buf.write("\2\2\2\u0213\u0215\5\u0180\u00c1\2\u0214\u0213\3\2\2\2")
        buf.write("\u0214\u0215\3\2\2\2\u0215\u0217\3\2\2\2\u0216\u0218\5")
        buf.write("\u00d6l\2\u0217\u0216\3\2\2\2\u0217\u0218\3\2\2\2\u0218")
        buf.write("\u021a\3\2\2\2\u0219\u021b\5\u00f8}\2\u021a\u0219\3\2")
        buf.write("\2\2\u021a\u021b\3\2\2\2\u021b\37\3\2\2\2\u021c\u021d")
        buf.write("\b\21\1\2\u021d\u025d\5\4\3\2\u021e\u021f\5\u009eP\2\u021f")
        buf.write("\u0221\7P\2\2\u0220\u0222\5\"\22\2\u0221\u0220\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\7")
        buf.write("Q\2\2\u0224\u025d\3\2\2\2\u0225\u0226\5\u016e\u00b8\2")
        buf.write("\u0226\u0228\7P\2\2\u0227\u0229\5\"\22\2\u0228\u0227\3")
        buf.write("\2\2\2\u0228\u0229\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b")
        buf.write("\7Q\2\2\u022b\u025d\3\2\2\2\u022c\u022d\5\u009eP\2\u022d")
        buf.write("\u022e\5\u0122\u0092\2\u022e\u025d\3\2\2\2\u022f\u0230")
        buf.write("\5\u016e\u00b8\2\u0230\u0231\5\u0122\u0092\2\u0231\u025d")
        buf.write("\3\2\2\2\u0232\u0233\7\32\2\2\u0233\u0234\7a\2\2\u0234")
        buf.write("\u0235\5\u0104\u0083\2\u0235\u0236\7b\2\2\u0236\u0237")
        buf.write("\7P\2\2\u0237\u0238\5\\/\2\u0238\u0239\7Q\2\2\u0239\u025d")
        buf.write("\3\2\2\2\u023a\u023b\7<\2\2\u023b\u023c\7a\2\2\u023c\u023d")
        buf.write("\5\u0104\u0083\2\u023d\u023e\7b\2\2\u023e\u023f\7P\2\2")
        buf.write("\u023f\u0240\5\\/\2\u0240\u0241\7Q\2\2\u0241\u025d\3\2")
        buf.write("\2\2\u0242\u0243\7\65\2\2\u0243\u0244\7a\2\2\u0244\u0245")
        buf.write("\5\u0104\u0083\2\u0245\u0246\7b\2\2\u0246\u0247\7P\2\2")
        buf.write("\u0247\u0248\5\\/\2\u0248\u0249\7Q\2\2\u0249\u025d\3\2")
        buf.write("\2\2\u024a\u024b\7\23\2\2\u024b\u024c\7a\2\2\u024c\u024d")
        buf.write("\5\u0104\u0083\2\u024d\u024e\7b\2\2\u024e\u024f\7P\2\2")
        buf.write("\u024f\u0250\5\\/\2\u0250\u0251\7Q\2\2\u0251\u025d\3\2")
        buf.write("\2\2\u0252\u0253\7F\2\2\u0253\u0254\7P\2\2\u0254\u0255")
        buf.write("\5\\/\2\u0255\u0256\7Q\2\2\u0256\u025d\3\2\2\2\u0257\u0258")
        buf.write("\7F\2\2\u0258\u0259\7P\2\2\u0259\u025a\5\u0104\u0083\2")
        buf.write("\u025a\u025b\7Q\2\2\u025b\u025d\3\2\2\2\u025c\u021c\3")
        buf.write("\2\2\2\u025c\u021e\3\2\2\2\u025c\u0225\3\2\2\2\u025c\u022c")
        buf.write("\3\2\2\2\u025c\u022f\3\2\2\2\u025c\u0232\3\2\2\2\u025c")
        buf.write("\u023a\3\2\2\2\u025c\u0242\3\2\2\2\u025c\u024a\3\2\2\2")
        buf.write("\u025c\u0252\3\2\2\2\u025c\u0257\3\2\2\2\u025d\u0286\3")
        buf.write("\2\2\2\u025e\u025f\f\25\2\2\u025f\u0260\7R\2\2\u0260\u0261")
        buf.write("\5\\/\2\u0261\u0262\7S\2\2\u0262\u0285\3\2\2\2\u0263\u0264")
        buf.write("\f\24\2\2\u0264\u0265\7R\2\2\u0265\u0266\5\u0122\u0092")
        buf.write("\2\u0266\u0267\7S\2\2\u0267\u0285\3\2\2\2\u0268\u0269")
        buf.write("\f\23\2\2\u0269\u026b\7P\2\2\u026a\u026c\5\"\22\2\u026b")
        buf.write("\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3\2\2\2")
        buf.write("\u026d\u0285\7Q\2\2\u026e\u026f\f\16\2\2\u026f\u0271\7")
        buf.write("|\2\2\u0270\u0272\7?\2\2\u0271\u0270\3\2\2\2\u0271\u0272")
        buf.write("\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0285\5\6\4\2\u0274")
        buf.write("\u0275\f\r\2\2\u0275\u0277\7w\2\2\u0276\u0278\7?\2\2\u0277")
        buf.write("\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2")
        buf.write("\u0279\u0285\5\6\4\2\u027a\u027b\f\f\2\2\u027b\u027c\7")
        buf.write("|\2\2\u027c\u0285\5$\23\2\u027d\u027e\f\13\2\2\u027e\u027f")
        buf.write("\7w\2\2\u027f\u0285\5$\23\2\u0280\u0281\f\n\2\2\u0281")
        buf.write("\u0285\7s\2\2\u0282\u0283\f\t\2\2\u0283\u0285\7t\2\2\u0284")
        buf.write("\u025e\3\2\2\2\u0284\u0263\3\2\2\2\u0284\u0268\3\2\2\2")
        buf.write("\u0284\u026e\3\2\2\2\u0284\u0274\3\2\2\2\u0284\u027a\3")
        buf.write("\2\2\2\u0284\u027d\3\2\2\2\u0284\u0280\3\2\2\2\u0284\u0282")
        buf.write("\3\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287!\3\2\2\2\u0288\u0286\3\2\2\2\u0289")
        buf.write("\u028a\5\u0120\u0091\2\u028a#\3\2\2\2\u028b\u028d\5\f")
        buf.write("\7\2\u028c\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e")
        buf.write("\3\2\2\2\u028e\u028f\5\u00a0Q\2\u028f\u0290\7z\2\2\u0290")
        buf.write("\u0291\7^\2\2\u0291\u0292\5\u00a0Q\2\u0292\u02a2\3\2\2")
        buf.write("\2\u0293\u0294\5\f\7\2\u0294\u0295\7?\2\2\u0295\u0296")
        buf.write("\5\u0164\u00b3\2\u0296\u0297\7z\2\2\u0297\u0298\7^\2\2")
        buf.write("\u0298\u0299\5\u00a0Q\2\u0299\u02a2\3\2\2\2\u029a\u029c")
        buf.write("\5\f\7\2\u029b\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d\u029e\7^\2\2\u029e\u02a2\5\u00a0")
        buf.write("Q\2\u029f\u02a0\7^\2\2\u02a0\u02a2\5\u00a2R\2\u02a1\u028c")
        buf.write("\3\2\2\2\u02a1\u0293\3\2\2\2\u02a1\u029b\3\2\2\2\u02a1")
        buf.write("\u029f\3\2\2\2\u02a2%\3\2\2\2\u02a3\u02b1\5 \21\2\u02a4")
        buf.write("\u02a5\7s\2\2\u02a5\u02b1\5> \2\u02a6\u02a7\7t\2\2\u02a7")
        buf.write("\u02b1\5> \2\u02a8\u02a9\5,\27\2\u02a9\u02aa\5> \2\u02aa")
        buf.write("\u02b1\3\2\2\2\u02ab\u02b1\5(\25\2\u02ac\u02b1\5*\26\2")
        buf.write("\u02ad\u02b1\5<\37\2\u02ae\u02b1\5.\30\2\u02af\u02b1\5")
        buf.write(":\36\2\u02b0\u02a3\3\2\2\2\u02b0\u02a4\3\2\2\2\u02b0\u02a6")
        buf.write("\3\2\2\2\u02b0\u02a8\3\2\2\2\u02b0\u02ab\3\2\2\2\u02b0")
        buf.write("\u02ac\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b0\u02af\3\2\2\2\u02b1\'\3\2\2\2\u02b2\u02b3\79\2")
        buf.write("\2\u02b3\u02bf\5&\24\2\u02b4\u02b5\79\2\2\u02b5\u02b6")
        buf.write("\7P\2\2\u02b6\u02b7\5\u0104\u0083\2\u02b7\u02b8\7Q\2\2")
        buf.write("\u02b8\u02bf\3\2\2\2\u02b9\u02ba\79\2\2\u02ba\u02bb\7")
        buf.write("~\2\2\u02bb\u02bc\7P\2\2\u02bc\u02bd\7\177\2\2\u02bd\u02bf")
        buf.write("\7Q\2\2\u02be\u02b2\3\2\2\2\u02be\u02b4\3\2\2\2\u02be")
        buf.write("\u02b9\3\2\2\2\u02bf)\3\2\2\2\u02c0\u02c1\7\6\2\2\u02c1")
        buf.write("\u02c2\7P\2\2\u02c2\u02c3\5\u0104\u0083\2\u02c3\u02c4")
        buf.write("\7Q\2\2\u02c4+\3\2\2\2\u02c5\u02c6\t\3\2\2\u02c6-\3\2")
        buf.write("\2\2\u02c7\u02c9\7z\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9")
        buf.write("\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc\7,\2\2\u02cb")
        buf.write("\u02cd\5\60\31\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2")
        buf.write("\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0\5\62\32\2\u02cf\u02d1")
        buf.write("\58\35\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1")
        buf.write("\u02e0\3\2\2\2\u02d2\u02d4\7z\2\2\u02d3\u02d2\3\2\2\2")
        buf.write("\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\7")
        buf.write(",\2\2\u02d6\u02d8\5\60\31\2\u02d7\u02d6\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da\7P\2\2")
        buf.write("\u02da\u02db\5\u0104\u0083\2\u02db\u02dd\7Q\2\2\u02dc")
        buf.write("\u02de\58\35\2\u02dd\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2")
        buf.write("\u02de\u02e0\3\2\2\2\u02df\u02c8\3\2\2\2\u02df\u02d3\3")
        buf.write("\2\2\2\u02e0/\3\2\2\2\u02e1\u02e2\7P\2\2\u02e2\u02e3\5")
        buf.write("\"\22\2\u02e3\u02e4\7Q\2\2\u02e4\61\3\2\2\2\u02e5\u02e7")
        buf.write("\5\u009aN\2\u02e6\u02e8\5\64\33\2\u02e7\u02e6\3\2\2\2")
        buf.write("\u02e7\u02e8\3\2\2\2\u02e8\63\3\2\2\2\u02e9\u02eb\5\u00fa")
        buf.write("~\2\u02ea\u02ec\5\64\33\2\u02eb\u02ea\3\2\2\2\u02eb\u02ec")
        buf.write("\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02ef\5\66\34\2\u02ee")
        buf.write("\u02e9\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\65\3\2\2\2\u02f0")
        buf.write("\u02f1\b\34\1\2\u02f1\u02f2\7R\2\2\u02f2\u02f3\5\\/\2")
        buf.write("\u02f3\u02f5\7S\2\2\u02f4\u02f6\5\u00d6l\2\u02f5\u02f4")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u0300\3\2\2\2\u02f7")
        buf.write("\u02f8\f\3\2\2\u02f8\u02f9\7R\2\2\u02f9\u02fa\5^\60\2")
        buf.write("\u02fa\u02fc\7S\2\2\u02fb\u02fd\5\u00d6l\2\u02fc\u02fb")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02ff\3\2\2\2\u02fe")
        buf.write("\u02f7\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\67\3\2\2\2\u0302\u0300\3\2")
        buf.write("\2\2\u0303\u0305\7P\2\2\u0304\u0306\5\"\22\2\u0305\u0304")
        buf.write("\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\u030a\7Q\2\2\u0308\u030a\5\u0122\u0092\2\u0309\u0303")
        buf.write("\3\2\2\2\u0309\u0308\3\2\2\2\u030a9\3\2\2\2\u030b\u030d")
        buf.write("\7z\2\2\u030c\u030b\3\2\2\2\u030c\u030d\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u030f\7\27\2\2\u030f\u0318\5> \2")
        buf.write("\u0310\u0312\7z\2\2\u0311\u0310\3\2\2\2\u0311\u0312\3")
        buf.write("\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\7\27\2\2\u0314")
        buf.write("\u0315\7R\2\2\u0315\u0316\7S\2\2\u0316\u0318\5> \2\u0317")
        buf.write("\u030c\3\2\2\2\u0317\u0311\3\2\2\2\u0318;\3\2\2\2\u0319")
        buf.write("\u031a\7-\2\2\u031a\u031b\7P\2\2\u031b\u031c\5\\/\2\u031c")
        buf.write("\u031d\7Q\2\2\u031d=\3\2\2\2\u031e\u0325\5&\24\2\u031f")
        buf.write("\u0320\7P\2\2\u0320\u0321\5\u0104\u0083\2\u0321\u0322")
        buf.write("\7Q\2\2\u0322\u0323\5> \2\u0323\u0325\3\2\2\2\u0324\u031e")
        buf.write("\3\2\2\2\u0324\u031f\3\2\2\2\u0325?\3\2\2\2\u0326\u0327")
        buf.write("\b!\1\2\u0327\u0328\5> \2\u0328\u0331\3\2\2\2\u0329\u032a")
        buf.write("\f\4\2\2\u032a\u032b\7}\2\2\u032b\u0330\5> \2\u032c\u032d")
        buf.write("\f\3\2\2\u032d\u032e\7v\2\2\u032e\u0330\5> \2\u032f\u0329")
        buf.write("\3\2\2\2\u032f\u032c\3\2\2\2\u0330\u0333\3\2\2\2\u0331")
        buf.write("\u032f\3\2\2\2\u0331\u0332\3\2\2\2\u0332A\3\2\2\2\u0333")
        buf.write("\u0331\3\2\2\2\u0334\u0335\b\"\1\2\u0335\u0336\5@!\2\u0336")
        buf.write("\u0342\3\2\2\2\u0337\u0338\f\5\2\2\u0338\u0339\7X\2\2")
        buf.write("\u0339\u0341\5@!\2\u033a\u033b\f\4\2\2\u033b\u033c\7Y")
        buf.write("\2\2\u033c\u0341\5@!\2\u033d\u033e\f\3\2\2\u033e\u033f")
        buf.write("\7Z\2\2\u033f\u0341\5@!\2\u0340\u0337\3\2\2\2\u0340\u033a")
        buf.write("\3\2\2\2\u0340\u033d\3\2\2\2\u0341\u0344\3\2\2\2\u0342")
        buf.write("\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343C\3\2\2\2\u0344")
        buf.write("\u0342\3\2\2\2\u0345\u0346\b#\1\2\u0346\u0347\5B\"\2\u0347")
        buf.write("\u0350\3\2\2\2\u0348\u0349\f\4\2\2\u0349\u034a\7V\2\2")
        buf.write("\u034a\u034f\5B\"\2\u034b\u034c\f\3\2\2\u034c\u034d\7")
        buf.write("W\2\2\u034d\u034f\5B\"\2\u034e\u0348\3\2\2\2\u034e\u034b")
        buf.write("\3\2\2\2\u034f\u0352\3\2\2\2\u0350\u034e\3\2\2\2\u0350")
        buf.write("\u0351\3\2\2\2\u0351E\3\2\2\2\u0352\u0350\3\2\2\2\u0353")
        buf.write("\u0354\b$\1\2\u0354\u0355\5D#\2\u0355\u035f\3\2\2\2\u0356")
        buf.write("\u0357\f\4\2\2\u0357\u0358\7k\2\2\u0358\u035e\5D#\2\u0359")
        buf.write("\u035a\f\3\2\2\u035a\u035b\5\u0188\u00c5\2\u035b\u035c")
        buf.write("\5D#\2\u035c\u035e\3\2\2\2\u035d\u0356\3\2\2\2\u035d\u0359")
        buf.write("\3\2\2\2\u035e\u0361\3\2\2\2\u035f\u035d\3\2\2\2\u035f")
        buf.write("\u0360\3\2\2\2\u0360G\3\2\2\2\u0361\u035f\3\2\2\2\u0362")
        buf.write("\u0363\b%\1\2\u0363\u0364\5F$\2\u0364\u0373\3\2\2\2\u0365")
        buf.write("\u0366\f\6\2\2\u0366\u0367\7a\2\2\u0367\u0372\5F$\2\u0368")
        buf.write("\u0369\f\5\2\2\u0369\u036a\7b\2\2\u036a\u0372\5F$\2\u036b")
        buf.write("\u036c\f\4\2\2\u036c\u036d\7o\2\2\u036d\u0372\5F$\2\u036e")
        buf.write("\u036f\f\3\2\2\u036f\u0370\7p\2\2\u0370\u0372\5F$\2\u0371")
        buf.write("\u0365\3\2\2\2\u0371\u0368\3\2\2\2\u0371\u036b\3\2\2\2")
        buf.write("\u0371\u036e\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3")
        buf.write("\2\2\2\u0373\u0374\3\2\2\2\u0374I\3\2\2\2\u0375\u0373")
        buf.write("\3\2\2\2\u0376\u0377\b&\1\2\u0377\u0378\5H%\2\u0378\u0381")
        buf.write("\3\2\2\2\u0379\u037a\f\4\2\2\u037a\u037b\7m\2\2\u037b")
        buf.write("\u0380\5H%\2\u037c\u037d\f\3\2\2\u037d\u037e\7n\2\2\u037e")
        buf.write("\u0380\5H%\2\u037f\u0379\3\2\2\2\u037f\u037c\3\2\2\2\u0380")
        buf.write("\u0383\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382K\3\2\2\2\u0383\u0381\3\2\2\2\u0384\u0385\b\'\1")
        buf.write("\2\u0385\u0386\5J&\2\u0386\u038c\3\2\2\2\u0387\u0388\f")
        buf.write("\3\2\2\u0388\u0389\7\\\2\2\u0389\u038b\5J&\2\u038a\u0387")
        buf.write("\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038c")
        buf.write("\u038d\3\2\2\2\u038dM\3\2\2\2\u038e\u038c\3\2\2\2\u038f")
        buf.write("\u0390\b(\1\2\u0390\u0391\5L\'\2\u0391\u0397\3\2\2\2\u0392")
        buf.write("\u0393\f\3\2\2\u0393\u0394\7[\2\2\u0394\u0396\5L\'\2\u0395")
        buf.write("\u0392\3\2\2\2\u0396\u0399\3\2\2\2\u0397\u0395\3\2\2\2")
        buf.write("\u0397\u0398\3\2\2\2\u0398O\3\2\2\2\u0399\u0397\3\2\2")
        buf.write("\2\u039a\u039b\b)\1\2\u039b\u039c\5N(\2\u039c\u03a2\3")
        buf.write("\2\2\2\u039d\u039e\f\3\2\2\u039e\u039f\7]\2\2\u039f\u03a1")
        buf.write("\5N(\2\u03a0\u039d\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3Q\3\2\2\2\u03a4\u03a2")
        buf.write("\3\2\2\2\u03a5\u03a6\b*\1\2\u03a6\u03a7\5P)\2\u03a7\u03ad")
        buf.write("\3\2\2\2\u03a8\u03a9\f\3\2\2\u03a9\u03aa\7q\2\2\u03aa")
        buf.write("\u03ac\5P)\2\u03ab\u03a8\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad")
        buf.write("\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03aeS\3\2\2\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b1\b+\1\2\u03b1\u03b2\5R*\2\u03b2")
        buf.write("\u03b8\3\2\2\2\u03b3\u03b4\f\3\2\2\u03b4\u03b5\7r\2\2")
        buf.write("\u03b5\u03b7\5R*\2\u03b6\u03b3\3\2\2\2\u03b7\u03ba\3\2")
        buf.write("\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9U\3")
        buf.write("\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03c3\5T+\2\u03bc\u03bd")
        buf.write("\5T+\2\u03bd\u03be\7x\2\2\u03be\u03bf\5\\/\2\u03bf\u03c0")
        buf.write("\7y\2\2\u03c0\u03c1\5X-\2\u03c1\u03c3\3\2\2\2\u03c2\u03bb")
        buf.write("\3\2\2\2\u03c2\u03bc\3\2\2\2\u03c3W\3\2\2\2\u03c4\u03cb")
        buf.write("\5V,\2\u03c5\u03c6\5T+\2\u03c6\u03c7\5Z.\2\u03c7\u03c8")
        buf.write("\5\u011e\u0090\2\u03c8\u03cb\3\2\2\2\u03c9\u03cb\5\u017e")
        buf.write("\u00c0\2\u03ca\u03c4\3\2\2\2\u03ca\u03c5\3\2\2\2\u03ca")
        buf.write("\u03c9\3\2\2\2\u03cbY\3\2\2\2\u03cc\u03d8\7`\2\2\u03cd")
        buf.write("\u03d8\7e\2\2\u03ce\u03d8\7f\2\2\u03cf\u03d8\7g\2\2\u03d0")
        buf.write("\u03d8\7c\2\2\u03d1\u03d8\7d\2\2\u03d2\u03d8\5\u018a\u00c6")
        buf.write("\2\u03d3\u03d8\7l\2\2\u03d4\u03d8\7i\2\2\u03d5\u03d8\7")
        buf.write("h\2\2\u03d6\u03d8\7j\2\2\u03d7\u03cc\3\2\2\2\u03d7\u03cd")
        buf.write("\3\2\2\2\u03d7\u03ce\3\2\2\2\u03d7\u03cf\3\2\2\2\u03d7")
        buf.write("\u03d0\3\2\2\2\u03d7\u03d1\3\2\2\2\u03d7\u03d2\3\2\2\2")
        buf.write("\u03d7\u03d3\3\2\2\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5\3")
        buf.write("\2\2\2\u03d7\u03d6\3\2\2\2\u03d8[\3\2\2\2\u03d9\u03da")
        buf.write("\b/\1\2\u03da\u03db\5X-\2\u03db\u03e1\3\2\2\2\u03dc\u03dd")
        buf.write("\f\3\2\2\u03dd\u03de\7u\2\2\u03de\u03e0\5X-\2\u03df\u03dc")
        buf.write("\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2]\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4")
        buf.write("\u03e5\5V,\2\u03e5_\3\2\2\2\u03e6\u0401\5d\63\2\u03e7")
        buf.write("\u03e9\5\u00d6l\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2")
        buf.write("\2\2\u03e9\u03ea\3\2\2\2\u03ea\u0401\5f\64\2\u03eb\u03ed")
        buf.write("\5\u00d6l\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u0401\5h\65\2\u03ef\u03f1\5\u00d6")
        buf.write("l\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u0401\5l\67\2\u03f3\u03f5\5\u00d6l\2\u03f4")
        buf.write("\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u0401\5p9\2\u03f7\u03f9\5\u00d6l\2\u03f8\u03f7")
        buf.write("\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u0401\5x=\2\u03fb\u0401\5z>\2\u03fc\u03fe\5\u00d6l\2")
        buf.write("\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3")
        buf.write("\2\2\2\u03ff\u0401\5\u0174\u00bb\2\u0400\u03e6\3\2\2\2")
        buf.write("\u0400\u03e8\3\2\2\2\u0400\u03ec\3\2\2\2\u0400\u03f0\3")
        buf.write("\2\2\2\u0400\u03f4\3\2\2\2\u0400\u03f8\3\2\2\2\u0400\u03fb")
        buf.write("\3\2\2\2\u0400\u03fd\3\2\2\2\u0401a\3\2\2\2\u0402\u0404")
        buf.write("\5\u00d6l\2\u0403\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u0406\7\177\2\2\u0406\u0414\7y\2")
        buf.write("\2\u0407\u0409\5\u00d6l\2\u0408\u0407\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b\7\13\2\2\u040b")
        buf.write("\u040c\5^\60\2\u040c\u040d\7y\2\2\u040d\u0414\3\2\2\2")
        buf.write("\u040e\u0410\5\u00d6l\2\u040f\u040e\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\7\26\2\2\u0412")
        buf.write("\u0414\7y\2\2\u0413\u0403\3\2\2\2\u0413\u0408\3\2\2\2")
        buf.write("\u0413\u040f\3\2\2\2\u0414c\3\2\2\2\u0415\u0416\5b\62")
        buf.write("\2\u0416\u0417\5`\61\2\u0417e\3\2\2\2\u0418\u041a\5\\")
        buf.write("/\2\u0419\u0418\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b")
        buf.write("\3\2\2\2\u041b\u041c\7{\2\2\u041cg\3\2\2\2\u041d\u041f")
        buf.write("\7T\2\2\u041e\u0420\5j\66\2\u041f\u041e\3\2\2\2\u041f")
        buf.write("\u0420\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\7U\2\2")
        buf.write("\u0422i\3\2\2\2\u0423\u0424\b\66\1\2\u0424\u0425\5`\61")
        buf.write("\2\u0425\u042a\3\2\2\2\u0426\u0427\f\3\2\2\u0427\u0429")
        buf.write("\5`\61\2\u0428\u0426\3\2\2\2\u0429\u042c\3\2\2\2\u042a")
        buf.write("\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042bk\3\2\2\2\u042c")
        buf.write("\u042a\3\2\2\2\u042d\u042e\7&\2\2\u042e\u042f\7P\2\2\u042f")
        buf.write("\u0430\5n8\2\u0430\u0431\7Q\2\2\u0431\u0432\5`\61\2\u0432")
        buf.write("\u0442\3\2\2\2\u0433\u0434\7&\2\2\u0434\u0435\7P\2\2\u0435")
        buf.write("\u0436\5n8\2\u0436\u0437\7Q\2\2\u0437\u0438\5`\61\2\u0438")
        buf.write("\u0439\7\33\2\2\u0439\u043a\5`\61\2\u043a\u0442\3\2\2")
        buf.write("\2\u043b\u043c\7>\2\2\u043c\u043d\7P\2\2\u043d\u043e\5")
        buf.write("n8\2\u043e\u043f\7Q\2\2\u043f\u0440\5`\61\2\u0440\u0442")
        buf.write("\3\2\2\2\u0441\u042d\3\2\2\2\u0441\u0433\3\2\2\2\u0441")
        buf.write("\u043b\3\2\2\2\u0442m\3\2\2\2\u0443\u0454\5\\/\2\u0444")
        buf.write("\u0446\5\u00d6l\2\u0445\u0444\3\2\2\2\u0445\u0446\3\2")
        buf.write("\2\2\u0446\u0447\3\2\2\2\u0447\u0448\5\u008eH\2\u0448")
        buf.write("\u0449\5\u00f0y\2\u0449\u044a\7`\2\2\u044a\u044b\5\u011e")
        buf.write("\u0090\2\u044b\u0454\3\2\2\2\u044c\u044e\5\u00d6l\2\u044d")
        buf.write("\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2")
        buf.write("\u044f\u0450\5\u008eH\2\u0450\u0451\5\u00f0y\2\u0451\u0452")
        buf.write("\5\u0122\u0092\2\u0452\u0454\3\2\2\2\u0453\u0443\3\2\2")
        buf.write("\2\u0453\u0445\3\2\2\2\u0453\u044d\3\2\2\2\u0454o\3\2")
        buf.write("\2\2\u0455\u0456\7O\2\2\u0456\u0457\7P\2\2\u0457\u0458")
        buf.write("\5n8\2\u0458\u0459\7Q\2\2\u0459\u045a\5`\61\2\u045a\u0479")
        buf.write("\3\2\2\2\u045b\u045c\7\30\2\2\u045c\u045d\5`\61\2\u045d")
        buf.write("\u045e\7O\2\2\u045e\u045f\7P\2\2\u045f\u0460\5n8\2\u0460")
        buf.write("\u0461\7Q\2\2\u0461\u0462\7{\2\2\u0462\u0479\3\2\2\2\u0463")
        buf.write("\u0464\7#\2\2\u0464\u0465\7P\2\2\u0465\u0467\5r:\2\u0466")
        buf.write("\u0468\5n8\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u046b\7{\2\2\u046a\u046c\5\\/\2\u046b")
        buf.write("\u046a\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\3\2\2\2")
        buf.write("\u046d\u046e\7Q\2\2\u046e\u046f\5`\61\2\u046f\u0479\3")
        buf.write("\2\2\2\u0470\u0471\7#\2\2\u0471\u0472\7P\2\2\u0472\u0473")
        buf.write("\5t;\2\u0473\u0474\7y\2\2\u0474\u0475\5v<\2\u0475\u0476")
        buf.write("\7Q\2\2\u0476\u0477\5`\61\2\u0477\u0479\3\2\2\2\u0478")
        buf.write("\u0455\3\2\2\2\u0478\u045b\3\2\2\2\u0478\u0463\3\2\2\2")
        buf.write("\u0478\u0470\3\2\2\2\u0479q\3\2\2\2\u047a\u047d\5f\64")
        buf.write("\2\u047b\u047d\5\u0084C\2\u047c\u047a\3\2\2\2\u047c\u047b")
        buf.write("\3\2\2\2\u047ds\3\2\2\2\u047e\u0480\5\u00d6l\2\u047f\u047e")
        buf.write("\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\3\2\2\2\u0481")
        buf.write("\u0482\5\u008eH\2\u0482\u0483\5\u00f0y\2\u0483u\3\2\2")
        buf.write("\2\u0484\u0487\5\\/\2\u0485\u0487\5\u0122\u0092\2\u0486")
        buf.write("\u0484\3\2\2\2\u0486\u0485\3\2\2\2\u0487w\3\2\2\2\u0488")
        buf.write("\u0489\7\n\2\2\u0489\u0499\7{\2\2\u048a\u048b\7\24\2\2")
        buf.write("\u048b\u0499\7{\2\2\u048c\u048e\7\66\2\2\u048d\u048f\5")
        buf.write("\\/\2\u048e\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490")
        buf.write("\3\2\2\2\u0490\u0499\7{\2\2\u0491\u0492\7\66\2\2\u0492")
        buf.write("\u0493\5\u0122\u0092\2\u0493\u0494\7{\2\2\u0494\u0499")
        buf.write("\3\2\2\2\u0495\u0496\7%\2\2\u0496\u0497\7\177\2\2\u0497")
        buf.write("\u0499\7{\2\2\u0498\u0488\3\2\2\2\u0498\u048a\3\2\2\2")
        buf.write("\u0498\u048c\3\2\2\2\u0498\u0491\3\2\2\2\u0498\u0495\3")
        buf.write("\2\2\2\u0499y\3\2\2\2\u049a\u049b\5\u0080A\2\u049b{\3")
        buf.write("\2\2\2\u049c\u049d\b?\1\2\u049d\u049e\5~@\2\u049e\u04a3")
        buf.write("\3\2\2\2\u049f\u04a0\f\3\2\2\u04a0\u04a2\5~@\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a2\u04a5\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3")
        buf.write("\u04a4\3\2\2\2\u04a4}\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6")
        buf.write("\u04b0\5\u0080A\2\u04a7\u04b0\5\u0116\u008c\2\u04a8\u04b0")
        buf.write("\5\u015c\u00af\2\u04a9\u04b0\5\u0170\u00b9\2\u04aa\u04b0")
        buf.write("\5\u0172\u00ba\2\u04ab\u04b0\5\u00d4k\2\u04ac\u04b0\5")
        buf.write("\u00bc_\2\u04ad\u04b0\5\u0088E\2\u04ae\u04b0\5\u008aF")
        buf.write("\2\u04af\u04a6\3\2\2\2\u04af\u04a7\3\2\2\2\u04af\u04a8")
        buf.write("\3\2\2\2\u04af\u04a9\3\2\2\2\u04af\u04aa\3\2\2\2\u04af")
        buf.write("\u04ab\3\2\2\2\u04af\u04ac\3\2\2\2\u04af\u04ad\3\2\2\2")
        buf.write("\u04af\u04ae\3\2\2\2\u04b0\177\3\2\2\2\u04b1\u04ba\5\u0084")
        buf.write("C\2\u04b2\u04ba\5\u00d2j\2\u04b3\u04ba\5\u00caf\2\u04b4")
        buf.write("\u04ba\5\u00ceh\2\u04b5\u04ba\5\u00d0i\2\u04b6\u04ba\5")
        buf.write("\u0086D\2\u04b7\u04ba\5\u0082B\2\u04b8\u04ba\5\u00acW")
        buf.write("\2\u04b9\u04b1\3\2\2\2\u04b9\u04b2\3\2\2\2\u04b9\u04b3")
        buf.write("\3\2\2\2\u04b9\u04b4\3\2\2\2\u04b9\u04b5\3\2\2\2\u04b9")
        buf.write("\u04b6\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04b8\3\2\2\2")
        buf.write("\u04ba\u0081\3\2\2\2\u04bb\u04bc\7J\2\2\u04bc\u04be\7")
        buf.write("\177\2\2\u04bd\u04bf\5\u00d6l\2\u04be\u04bd\3\2\2\2\u04be")
        buf.write("\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\7`\2\2")
        buf.write("\u04c1\u04c2\5\u0104\u0083\2\u04c2\u04c3\7{\2\2\u04c3")
        buf.write("\u0083\3\2\2\2\u04c4\u04c6\5\u008eH\2\u04c5\u04c4\3\2")
        buf.write("\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c8\3\2\2\2\u04c7\u04c9")
        buf.write("\5\u00ecw\2\u04c8\u04c7\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9")
        buf.write("\u04ca\3\2\2\2\u04ca\u04d3\7{\2\2\u04cb\u04cd\5\u00d6")
        buf.write("l\2\u04cc\u04ce\5\u008eH\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce")
        buf.write("\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0\5\u00ecw\2\u04d0")
        buf.write("\u04d1\7{\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04c5\3\2\2\2")
        buf.write("\u04d2\u04cb\3\2\2\2\u04d3\u0085\3\2\2\2\u04d4\u04d5\7")
        buf.write(";\2\2\u04d5\u04d6\7P\2\2\u04d6\u04d7\5^\60\2\u04d7\u04d8")
        buf.write("\7u\2\2\u04d8\u04d9\7\u0088\2\2\u04d9\u04da\7Q\2\2\u04da")
        buf.write("\u04db\7{\2\2\u04db\u0087\3\2\2\2\u04dc\u04dd\7{\2\2\u04dd")
        buf.write("\u0089\3\2\2\2\u04de\u04df\5\u00d6l\2\u04df\u04e0\7{\2")
        buf.write("\2\u04e0\u008b\3\2\2\2\u04e1\u04e8\5\u0090I\2\u04e2\u04e8")
        buf.write("\5\u0096L\2\u04e3\u04e8\5\u0092J\2\u04e4\u04e8\7$\2\2")
        buf.write("\u04e5\u04e8\7E\2\2\u04e6\u04e8\7\22\2\2\u04e7\u04e1\3")
        buf.write("\2\2\2\u04e7\u04e2\3\2\2\2\u04e7\u04e3\3\2\2\2\u04e7\u04e4")
        buf.write("\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7\u04e6\3\2\2\2\u04e8")
        buf.write("\u008d\3\2\2\2\u04e9\u04eb\5\u008cG\2\u04ea\u04ec\5\u00d6")
        buf.write("l\2\u04eb\u04ea\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04f1")
        buf.write("\3\2\2\2\u04ed\u04ee\5\u008cG\2\u04ee\u04ef\5\u008eH\2")
        buf.write("\u04ef\u04f1\3\2\2\2\u04f0\u04e9\3\2\2\2\u04f0\u04ed\3")
        buf.write("\2\2\2\u04f1\u008f\3\2\2\2\u04f2\u04f3\t\4\2\2\u04f3\u0091")
        buf.write("\3\2\2\2\u04f4\u04f5\t\5\2\2\u04f5\u0093\3\2\2\2\u04f6")
        buf.write("\u04f7\7\177\2\2\u04f7\u0095\3\2\2\2\u04f8\u04fc\5\u0098")
        buf.write("M\2\u04f9\u04fc\5\u0126\u0094\2\u04fa\u04fc\5\u00a8U\2")
        buf.write("\u04fb\u04f8\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fa\3")
        buf.write("\2\2\2\u04fc\u0097\3\2\2\2\u04fd\u0502\5\u009eP\2\u04fe")
        buf.write("\u0502\5\u00a4S\2\u04ff\u0502\5\u016e\u00b8\2\u0500\u0502")
        buf.write("\5\u00fe\u0080\2\u0501\u04fd\3\2\2\2\u0501\u04fe\3\2\2")
        buf.write("\2\u0501\u04ff\3\2\2\2\u0501\u0500\3\2\2\2\u0502\u0099")
        buf.write("\3\2\2\2\u0503\u0505\5\u0096L\2\u0504\u0506\5\u00d6l\2")
        buf.write("\u0505\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u050b\3")
        buf.write("\2\2\2\u0507\u0508\5\u0096L\2\u0508\u0509\5\u009aN\2\u0509")
        buf.write("\u050b\3\2\2\2\u050a\u0503\3\2\2\2\u050a\u0507\3\2\2\2")
        buf.write("\u050b\u009b\3\2\2\2\u050c\u050e\5\u0098M\2\u050d\u050f")
        buf.write("\5\u00d6l\2\u050e\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f")
        buf.write("\u0514\3\2\2\2\u0510\u0511\5\u0098M\2\u0511\u0512\5\u009c")
        buf.write("O\2\u0512\u0514\3\2\2\2\u0513\u050c\3\2\2\2\u0513\u0510")
        buf.write("\3\2\2\2\u0514\u009d\3\2\2\2\u0515\u0517\5\f\7\2\u0516")
        buf.write("\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2")
        buf.write("\u0518\u052d\5\u00a0Q\2\u0519\u051a\5\f\7\2\u051a\u051b")
        buf.write("\7?\2\2\u051b\u051c\5\u0164\u00b3\2\u051c\u052d\3\2\2")
        buf.write("\2\u051d\u052d\7\r\2\2\u051e\u052d\7\16\2\2\u051f\u052d")
        buf.write("\7\17\2\2\u0520\u052d\7N\2\2\u0521\u052d\7\t\2\2\u0522")
        buf.write("\u052d\7\67\2\2\u0523\u052d\7(\2\2\u0524\u052d\7)\2\2")
        buf.write("\u0525\u052d\78\2\2\u0526\u052d\7I\2\2\u0527\u052d\7\"")
        buf.write("\2\2\u0528\u052d\7\31\2\2\u0529\u052d\7L\2\2\u052a\u052d")
        buf.write("\7\b\2\2\u052b\u052d\5\u00a2R\2\u052c\u0516\3\2\2\2\u052c")
        buf.write("\u0519\3\2\2\2\u052c\u051d\3\2\2\2\u052c\u051e\3\2\2\2")
        buf.write("\u052c\u051f\3\2\2\2\u052c\u0520\3\2\2\2\u052c\u0521\3")
        buf.write("\2\2\2\u052c\u0522\3\2\2\2\u052c\u0523\3\2\2\2\u052c\u0524")
        buf.write("\3\2\2\2\u052c\u0525\3\2\2\2\u052c\u0526\3\2\2\2\u052c")
        buf.write("\u0527\3\2\2\2\u052c\u0528\3\2\2\2\u052c\u0529\3\2\2\2")
        buf.write("\u052c\u052a\3\2\2\2\u052c\u052b\3\2\2\2\u052d\u009f\3")
        buf.write("\2\2\2\u052e\u0533\5\u0124\u0093\2\u052f\u0533\5\u00a6")
        buf.write("T\2\u0530\u0533\5\u0094K\2\u0531\u0533\5\u0164\u00b3\2")
        buf.write("\u0532\u052e\3\2\2\2\u0532\u052f\3\2\2\2\u0532\u0530\3")
        buf.write("\2\2\2\u0532\u0531\3\2\2\2\u0533\u00a1\3\2\2\2\u0534\u0535")
        buf.write("\7\25\2\2\u0535\u0536\7P\2\2\u0536\u0537\5\\/\2\u0537")
        buf.write("\u0538\7Q\2\2\u0538\u053e\3\2\2\2\u0539\u053a\7\25\2\2")
        buf.write("\u053a\u053b\7P\2\2\u053b\u053c\7\b\2\2\u053c\u053e\7")
        buf.write("Q\2\2\u053d\u0534\3\2\2\2\u053d\u0539\3\2\2\2\u053e\u00a3")
        buf.write("\3\2\2\2\u053f\u0541\5\u012e\u0098\2\u0540\u0542\5\u00d6")
        buf.write("l\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0544")
        buf.write("\3\2\2\2\u0543\u0545\5\f\7\2\u0544\u0543\3\2\2\2\u0544")
        buf.write("\u0545\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\7\177\2")
        buf.write("\2\u0547\u0558\3\2\2\2\u0548\u0549\5\u012e\u0098\2\u0549")
        buf.write("\u054a\5\u0164\u00b3\2\u054a\u0558\3\2\2\2\u054b\u054c")
        buf.write("\5\u012e\u0098\2\u054c\u054e\5\f\7\2\u054d\u054f\7?\2")
        buf.write("\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550")
        buf.write("\3\2\2\2\u0550\u0551\5\u0164\u00b3\2\u0551\u0558\3\2\2")
        buf.write("\2\u0552\u0554\7\34\2\2\u0553\u0555\5\f\7\2\u0554\u0553")
        buf.write("\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556")
        buf.write("\u0558\7\177\2\2\u0557\u053f\3\2\2\2\u0557\u0548\3\2\2")
        buf.write("\2\u0557\u054b\3\2\2\2\u0557\u0552\3\2\2\2\u0558\u00a5")
        buf.write("\3\2\2\2\u0559\u055a\7\177\2\2\u055a\u00a7\3\2\2\2\u055b")
        buf.write("\u055c\5\u00aaV\2\u055c\u055e\7T\2\2\u055d\u055f\5\u00b2")
        buf.write("Z\2\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560")
        buf.write("\3\2\2\2\u0560\u0561\7U\2\2\u0561\u0569\3\2\2\2\u0562")
        buf.write("\u0563\5\u00aaV\2\u0563\u0564\7T\2\2\u0564\u0565\5\u00b2")
        buf.write("Z\2\u0565\u0566\7u\2\2\u0566\u0567\7U\2\2\u0567\u0569")
        buf.write("\3\2\2\2\u0568\u055b\3\2\2\2\u0568\u0562\3\2\2\2\u0569")
        buf.write("\u00a9\3\2\2\2\u056a\u056c\5\u00aeX\2\u056b\u056d\5\u00d6")
        buf.write("l\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f")
        buf.write("\3\2\2\2\u056e\u0570\7\177\2\2\u056f\u056e\3\2\2\2\u056f")
        buf.write("\u0570\3\2\2\2\u0570\u0572\3\2\2\2\u0571\u0573\5\u00b0")
        buf.write("Y\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u057e")
        buf.write("\3\2\2\2\u0574\u0576\5\u00aeX\2\u0575\u0577\5\u00d6l\2")
        buf.write("\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\3")
        buf.write("\2\2\2\u0578\u0579\5\f\7\2\u0579\u057b\7\177\2\2\u057a")
        buf.write("\u057c\5\u00b0Y\2\u057b\u057a\3\2\2\2\u057b\u057c\3\2")
        buf.write("\2\2\u057c\u057e\3\2\2\2\u057d\u056a\3\2\2\2\u057d\u0574")
        buf.write("\3\2\2\2\u057e\u00ab\3\2\2\2\u057f\u0581\5\u00aeX\2\u0580")
        buf.write("\u0582\5\u00d6l\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2")
        buf.write("\2\2\u0582\u0583\3\2\2\2\u0583\u0585\7\177\2\2\u0584\u0586")
        buf.write("\5\u00b0Y\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u0587\3\2\2\2\u0587\u0588\7{\2\2\u0588\u00ad\3\2\2\2")
        buf.write("\u0589\u058f\7\34\2\2\u058a\u058b\7\34\2\2\u058b\u058f")
        buf.write("\7\20\2\2\u058c\u058d\7\34\2\2\u058d\u058f\7=\2\2\u058e")
        buf.write("\u0589\3\2\2\2\u058e\u058a\3\2\2\2\u058e\u058c\3\2\2\2")
        buf.write("\u058f\u00af\3\2\2\2\u0590\u0591\7y\2\2\u0591\u0592\5")
        buf.write("\u009aN\2\u0592\u00b1\3\2\2\2\u0593\u0594\bZ\1\2\u0594")
        buf.write("\u0595\5\u00b4[\2\u0595\u059b\3\2\2\2\u0596\u0597\f\3")
        buf.write("\2\2\u0597\u0598\7u\2\2\u0598\u059a\5\u00b4[\2\u0599\u0596")
        buf.write("\3\2\2\2\u059a\u059d\3\2\2\2\u059b\u0599\3\2\2\2\u059b")
        buf.write("\u059c\3\2\2\2\u059c\u00b3\3\2\2\2\u059d\u059b\3\2\2\2")
        buf.write("\u059e\u05a4\5\u00b6\\\2\u059f\u05a0\5\u00b6\\\2\u05a0")
        buf.write("\u05a1\7`\2\2\u05a1\u05a2\5^\60\2\u05a2\u05a4\3\2\2\2")
        buf.write("\u05a3\u059e\3\2\2\2\u05a3\u059f\3\2\2\2\u05a4\u00b5\3")
        buf.write("\2\2\2\u05a5\u05a6\7\177\2\2\u05a6\u00b7\3\2\2\2\u05a7")
        buf.write("\u05aa\5\u00ba^\2\u05a8\u05aa\5\u00c8e\2\u05a9\u05a7\3")
        buf.write("\2\2\2\u05a9\u05a8\3\2\2\2\u05aa\u00b9\3\2\2\2\u05ab\u05ac")
        buf.write("\7\177\2\2\u05ac\u00bb\3\2\2\2\u05ad\u05b0\5\u00be`\2")
        buf.write("\u05ae\u05b0\5\u00c4c\2\u05af\u05ad\3\2\2\2\u05af\u05ae")
        buf.write("\3\2\2\2\u05b0\u00bd\3\2\2\2\u05b1\u05b4\5\u00c0a\2\u05b2")
        buf.write("\u05b4\5\u00c2b\2\u05b3\u05b1\3\2\2\2\u05b3\u05b2\3\2")
        buf.write("\2\2\u05b4\u00bf\3\2\2\2\u05b5\u05b7\7\'\2\2\u05b6\u05b5")
        buf.write("\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8")
        buf.write("\u05b9\7+\2\2\u05b9\u05ba\7\177\2\2\u05ba\u05bb\7T\2\2")
        buf.write("\u05bb\u05bc\5\u00c6d\2\u05bc\u05bd\7U\2\2\u05bd\u00c1")
        buf.write("\3\2\2\2\u05be\u05c0\7\'\2\2\u05bf\u05be\3\2\2\2\u05bf")
        buf.write("\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\7+\2\2")
        buf.write("\u05c2\u05c3\5\u00ba^\2\u05c3\u05c4\7T\2\2\u05c4\u05c5")
        buf.write("\5\u00c6d\2\u05c5\u05c6\7U\2\2\u05c6\u00c3\3\2\2\2\u05c7")
        buf.write("\u05c9\7\'\2\2\u05c8\u05c7\3\2\2\2\u05c8\u05c9\3\2\2\2")
        buf.write("\u05c9\u05ca\3\2\2\2\u05ca\u05cb\7+\2\2\u05cb\u05cc\7")
        buf.write("T\2\2\u05cc\u05cd\5\u00c6d\2\u05cd\u05ce\7U\2\2\u05ce")
        buf.write("\u00c5\3\2\2\2\u05cf\u05d1\5|?\2\u05d0\u05cf\3\2\2\2\u05d0")
        buf.write("\u05d1\3\2\2\2\u05d1\u00c7\3\2\2\2\u05d2\u05d3\7\177\2")
        buf.write("\2\u05d3\u00c9\3\2\2\2\u05d4\u05d5\7+\2\2\u05d5\u05d6")
        buf.write("\7\177\2\2\u05d6\u05d7\7`\2\2\u05d7\u05d8\5\u00ccg\2\u05d8")
        buf.write("\u05d9\7{\2\2\u05d9\u00cb\3\2\2\2\u05da\u05dc\5\f\7\2")
        buf.write("\u05db\u05da\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3")
        buf.write("\2\2\2\u05dd\u05de\5\u00b8]\2\u05de\u00cd\3\2\2\2\u05df")
        buf.write("\u05e1\7J\2\2\u05e0\u05e2\7G\2\2\u05e1\u05e0\3\2\2\2\u05e1")
        buf.write("\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\5\f\7\2")
        buf.write("\u05e4\u05e5\5\b\5\2\u05e5\u05e6\7{\2\2\u05e6\u05ed\3")
        buf.write("\2\2\2\u05e7\u05e8\7J\2\2\u05e8\u05e9\7z\2\2\u05e9\u05ea")
        buf.write("\5\b\5\2\u05ea\u05eb\7{\2\2\u05eb\u05ed\3\2\2\2\u05ec")
        buf.write("\u05df\3\2\2\2\u05ec\u05e7\3\2\2\2\u05ed\u00cf\3\2\2\2")
        buf.write("\u05ee\u05f0\5\u00d6l\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0")
        buf.write("\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2\7J\2\2\u05f2")
        buf.write("\u05f4\7+\2\2\u05f3\u05f5\5\f\7\2\u05f4\u05f3\3\2\2\2")
        buf.write("\u05f4\u05f5\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\5")
        buf.write("\u00b8]\2\u05f7\u05f8\7{\2\2\u05f8\u00d1\3\2\2\2\u05f9")
        buf.write("\u05fa\7\7\2\2\u05fa\u05fb\7P\2\2\u05fb\u05fc\7\u0088")
        buf.write("\2\2\u05fc\u05fd\7Q\2\2\u05fd\u05fe\7{\2\2\u05fe\u00d3")
        buf.write("\3\2\2\2\u05ff\u0600\7\37\2\2\u0600\u0601\7\u0088\2\2")
        buf.write("\u0601\u0603\7T\2\2\u0602\u0604\5|?\2\u0603\u0602\3\2")
        buf.write("\2\2\u0603\u0604\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u060a")
        buf.write("\7U\2\2\u0606\u0607\7\37\2\2\u0607\u0608\7\u0088\2\2\u0608")
        buf.write("\u060a\5~@\2\u0609\u05ff\3\2\2\2\u0609\u0606\3\2\2\2\u060a")
        buf.write("\u00d5\3\2\2\2\u060b\u060c\bl\1\2\u060c\u060d\5\u00d8")
        buf.write("m\2\u060d\u0612\3\2\2\2\u060e\u060f\f\3\2\2\u060f\u0611")
        buf.write("\5\u00d8m\2\u0610\u060e\3\2\2\2\u0611\u0614\3\2\2\2\u0612")
        buf.write("\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u00d7\3\2\2\2")
        buf.write("\u0614\u0612\3\2\2\2\u0615\u0616\7R\2\2\u0616\u0617\7")
        buf.write("R\2\2\u0617\u0618\5\u00dco\2\u0618\u0619\7S\2\2\u0619")
        buf.write("\u061a\7S\2\2\u061a\u061d\3\2\2\2\u061b\u061d\5\u00da")
        buf.write("n\2\u061c\u0615\3\2\2\2\u061c\u061b\3\2\2\2\u061d\u00d9")
        buf.write("\3\2\2\2\u061e\u061f\7\5\2\2\u061f\u0620\7P\2\2\u0620")
        buf.write("\u0622\5\u0104\u0083\2\u0621\u0623\7~\2\2\u0622\u0621")
        buf.write("\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\3\2\2\2\u0624")
        buf.write("\u0625\7Q\2\2\u0625\u062f\3\2\2\2\u0626\u0627\7\5\2\2")
        buf.write("\u0627\u0628\7P\2\2\u0628\u062a\5^\60\2\u0629\u062b\7")
        buf.write("~\2\2\u062a\u0629\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c")
        buf.write("\3\2\2\2\u062c\u062d\7Q\2\2\u062d\u062f\3\2\2\2\u062e")
        buf.write("\u061e\3\2\2\2\u062e\u0626\3\2\2\2\u062f\u00db\3\2\2\2")
        buf.write("\u0630\u0632\bo\1\2\u0631\u0633\5\u00dep\2\u0632\u0631")
        buf.write("\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0638\3\2\2\2\u0634")
        buf.write("\u0635\5\u00dep\2\u0635\u0636\7~\2\2\u0636\u0638\3\2\2")
        buf.write("\2\u0637\u0630\3\2\2\2\u0637\u0634\3\2\2\2\u0638\u0645")
        buf.write("\3\2\2\2\u0639\u063a\f\5\2\2\u063a\u063c\7u\2\2\u063b")
        buf.write("\u063d\5\u00dep\2\u063c\u063b\3\2\2\2\u063c\u063d\3\2")
        buf.write("\2\2\u063d\u0644\3\2\2\2\u063e\u063f\f\3\2\2\u063f\u0640")
        buf.write("\7u\2\2\u0640\u0641\5\u00dep\2\u0641\u0642\7~\2\2\u0642")
        buf.write("\u0644\3\2\2\2\u0643\u0639\3\2\2\2\u0643\u063e\3\2\2\2")
        buf.write("\u0644\u0647\3\2\2\2\u0645\u0643\3\2\2\2\u0645\u0646\3")
        buf.write("\2\2\2\u0646\u00dd\3\2\2\2\u0647\u0645\3\2\2\2\u0648\u064a")
        buf.write("\5\u00e0q\2\u0649\u064b\5\u00e6t\2\u064a\u0649\3\2\2\2")
        buf.write("\u064a\u064b\3\2\2\2\u064b\u00df\3\2\2\2\u064c\u064f\7")
        buf.write("\177\2\2\u064d\u064f\5\u00e2r\2\u064e\u064c\3\2\2\2\u064e")
        buf.write("\u064d\3\2\2\2\u064f\u00e1\3\2\2\2\u0650\u0651\5\u00e4")
        buf.write("s\2\u0651\u0652\7z\2\2\u0652\u0653\7\177\2\2\u0653\u00e3")
        buf.write("\3\2\2\2\u0654\u0655\7\177\2\2\u0655\u00e5\3\2\2\2\u0656")
        buf.write("\u0657\7P\2\2\u0657\u0658\5\u00e8u\2\u0658\u0659\7Q\2")
        buf.write("\2\u0659\u00e7\3\2\2\2\u065a\u065c\bu\1\2\u065b\u065d")
        buf.write("\5\u00eav\2\u065c\u065b\3\2\2\2\u065c\u065d\3\2\2\2\u065d")
        buf.write("\u0662\3\2\2\2\u065e\u065f\f\3\2\2\u065f\u0661\5\u00ea")
        buf.write("v\2\u0660\u065e\3\2\2\2\u0661\u0664\3\2\2\2\u0662\u0660")
        buf.write("\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u00e9\3\2\2\2\u0664")
        buf.write("\u0662\3\2\2\2\u0665\u0666\7P\2\2\u0666\u0667\5\u00e8")
        buf.write("u\2\u0667\u0668\7Q\2\2\u0668\u0672\3\2\2\2\u0669\u066a")
        buf.write("\7R\2\2\u066a\u066b\5\u00e8u\2\u066b\u066c\7S\2\2\u066c")
        buf.write("\u0672\3\2\2\2\u066d\u066e\7T\2\2\u066e\u066f\5\u00e8")
        buf.write("u\2\u066f\u0670\7U\2\2\u0670\u0672\3\2\2\2\u0671\u0665")
        buf.write("\3\2\2\2\u0671\u0669\3\2\2\2\u0671\u066d\3\2\2\2\u0672")
        buf.write("\u00eb\3\2\2\2\u0673\u0674\bw\1\2\u0674\u0675\5\u00ee")
        buf.write("x\2\u0675\u067b\3\2\2\2\u0676\u0677\f\3\2\2\u0677\u0678")
        buf.write("\7u\2\2\u0678\u067a\5\u00eex\2\u0679\u0676\3\2\2\2\u067a")
        buf.write("\u067d\3\2\2\2\u067b\u0679\3\2\2\2\u067b\u067c\3\2\2\2")
        buf.write("\u067c\u00ed\3\2\2\2\u067d\u067b\3\2\2\2\u067e\u0680\5")
        buf.write("\u00f0y\2\u067f\u0681\5\u011a\u008e\2\u0680\u067f\3\2")
        buf.write("\2\2\u0680\u0681\3\2\2\2\u0681\u00ef\3\2\2\2\u0682\u0688")
        buf.write("\5\u00f2z\2\u0683\u0684\5\u00f4{\2\u0684\u0685\5\u00f6")
        buf.write("|\2\u0685\u0686\5\u00f8}\2\u0686\u0688\3\2\2\2\u0687\u0682")
        buf.write("\3\2\2\2\u0687\u0683\3\2\2\2\u0688\u00f1\3\2\2\2\u0689")
        buf.write("\u068e\5\u00f4{\2\u068a\u068b\5\u00fa~\2\u068b\u068c\5")
        buf.write("\u00f2z\2\u068c\u068e\3\2\2\2\u068d\u0689\3\2\2\2\u068d")
        buf.write("\u068a\3\2\2\2\u068e\u00f3\3\2\2\2\u068f\u0690\b{\1\2")
        buf.write("\u0690\u0692\5\u0102\u0082\2\u0691\u0693\5\u00d6l\2\u0692")
        buf.write("\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0699\3\2\2\2")
        buf.write("\u0694\u0695\7P\2\2\u0695\u0696\5\u00f2z\2\u0696\u0697")
        buf.write("\7Q\2\2\u0697\u0699\3\2\2\2\u0698\u068f\3\2\2\2\u0698")
        buf.write("\u0694\3\2\2\2\u0699\u06a7\3\2\2\2\u069a\u069b\f\5\2\2")
        buf.write("\u069b\u06a6\5\u00f6|\2\u069c\u069d\f\4\2\2\u069d\u069f")
        buf.write("\7R\2\2\u069e\u06a0\5^\60\2\u069f\u069e\3\2\2\2\u069f")
        buf.write("\u06a0\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3\7S\2\2")
        buf.write("\u06a2\u06a4\5\u00d6l\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4")
        buf.write("\3\2\2\2\u06a4\u06a6\3\2\2\2\u06a5\u069a\3\2\2\2\u06a5")
        buf.write("\u069c\3\2\2\2\u06a6\u06a9\3\2\2\2\u06a7\u06a5\3\2\2\2")
        buf.write("\u06a7\u06a8\3\2\2\2\u06a8\u00f5\3\2\2\2\u06a9\u06a7\3")
        buf.write("\2\2\2\u06aa\u06ab\7P\2\2\u06ab\u06ac\5\u0110\u0089\2")
        buf.write("\u06ac\u06ae\7Q\2\2\u06ad\u06af\5\u00fc\177\2\u06ae\u06ad")
        buf.write("\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b1\3\2\2\2\u06b0")
        buf.write("\u06b2\5\u0100\u0081\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2")
        buf.write("\3\2\2\2\u06b2\u06b4\3\2\2\2\u06b3\u06b5\5\u0180\u00c1")
        buf.write("\2\u06b4\u06b3\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b7")
        buf.write("\3\2\2\2\u06b6\u06b8\5\u00d6l\2\u06b7\u06b6\3\2\2\2\u06b7")
        buf.write("\u06b8\3\2\2\2\u06b8\u00f7\3\2\2\2\u06b9\u06ba\7w\2\2")
        buf.write("\u06ba\u06bc\5\u009cO\2\u06bb\u06bd\5\u0106\u0084\2\u06bc")
        buf.write("\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u00f9\3\2\2\2")
        buf.write("\u06be\u06c0\7X\2\2\u06bf\u06c1\5\u00d6l\2\u06c0\u06bf")
        buf.write("\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c3\3\2\2\2\u06c2")
        buf.write("\u06c4\5\u00fc\177\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3")
        buf.write("\2\2\2\u06c4\u06d6\3\2\2\2\u06c5\u06c7\7\\\2\2\u06c6\u06c8")
        buf.write("\5\u00d6l\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8")
        buf.write("\u06d6\3\2\2\2\u06c9\u06cb\7q\2\2\u06ca\u06cc\5\u00d6")
        buf.write("l\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06d6")
        buf.write("\3\2\2\2\u06cd\u06ce\5\f\7\2\u06ce\u06d0\7X\2\2\u06cf")
        buf.write("\u06d1\5\u00d6l\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2")
        buf.write("\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06d4\5\u00fc\177\2\u06d3")
        buf.write("\u06d2\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d6\3\2\2\2")
        buf.write("\u06d5\u06be\3\2\2\2\u06d5\u06c5\3\2\2\2\u06d5\u06c9\3")
        buf.write("\2\2\2\u06d5\u06cd\3\2\2\2\u06d6\u00fb\3\2\2\2\u06d7\u06d9")
        buf.write("\5\u00fe\u0080\2\u06d8\u06da\5\u00fc\177\2\u06d9\u06d8")
        buf.write("\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u00fd\3\2\2\2\u06db")
        buf.write("\u06dc\t\6\2\2\u06dc\u00ff\3\2\2\2\u06dd\u06de\t\7\2\2")
        buf.write("\u06de\u0101\3\2\2\2\u06df\u06e1\7~\2\2\u06e0\u06df\3")
        buf.write("\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e3")
        buf.write("\5\6\4\2\u06e3\u0103\3\2\2\2\u06e4\u06e6\5\u009aN\2\u06e5")
        buf.write("\u06e7\5\u0106\u0084\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7")
        buf.write("\3\2\2\2\u06e7\u0105\3\2\2\2\u06e8\u06f1\5\u0108\u0085")
        buf.write("\2\u06e9\u06eb\5\u010a\u0086\2\u06ea\u06e9\3\2\2\2\u06ea")
        buf.write("\u06eb\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\5\u00f6")
        buf.write("|\2\u06ed\u06ee\5\u00f8}\2\u06ee\u06f1\3\2\2\2\u06ef\u06f1")
        buf.write("\5\u010c\u0087\2\u06f0\u06e8\3\2\2\2\u06f0\u06ea\3\2\2")
        buf.write("\2\u06f0\u06ef\3\2\2\2\u06f1\u0107\3\2\2\2\u06f2\u06f8")
        buf.write("\5\u010a\u0086\2\u06f3\u06f5\5\u00fa~\2\u06f4\u06f6\5")
        buf.write("\u0108\u0085\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2")
        buf.write("\u06f6\u06f8\3\2\2\2\u06f7\u06f2\3\2\2\2\u06f7\u06f3\3")
        buf.write("\2\2\2\u06f8\u0109\3\2\2\2\u06f9\u06fa\b\u0086\1\2\u06fa")
        buf.write("\u0708\5\u00f6|\2\u06fb\u06fd\7R\2\2\u06fc\u06fe\5^\60")
        buf.write("\2\u06fd\u06fc\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u06ff")
        buf.write("\3\2\2\2\u06ff\u0701\7S\2\2\u0700\u0702\5\u00d6l\2\u0701")
        buf.write("\u0700\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u0708\3\2\2\2")
        buf.write("\u0703\u0704\7P\2\2\u0704\u0705\5\u0108\u0085\2\u0705")
        buf.write("\u0706\7Q\2\2\u0706\u0708\3\2\2\2\u0707\u06f9\3\2\2\2")
        buf.write("\u0707\u06fb\3\2\2\2\u0707\u0703\3\2\2\2\u0708\u0716\3")
        buf.write("\2\2\2\u0709\u070a\f\7\2\2\u070a\u0715\5\u00f6|\2\u070b")
        buf.write("\u070c\f\5\2\2\u070c\u070e\7R\2\2\u070d\u070f\5^\60\2")
        buf.write("\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\3")
        buf.write("\2\2\2\u0710\u0712\7S\2\2\u0711\u0713\5\u00d6l\2\u0712")
        buf.write("\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0715\3\2\2\2")
        buf.write("\u0714\u0709\3\2\2\2\u0714\u070b\3\2\2\2\u0715\u0718\3")
        buf.write("\2\2\2\u0716\u0714\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u010b")
        buf.write("\3\2\2\2\u0718\u0716\3\2\2\2\u0719\u071e\5\u010e\u0088")
        buf.write("\2\u071a\u071b\5\u00fa~\2\u071b\u071c\5\u010c\u0087\2")
        buf.write("\u071c\u071e\3\2\2\2\u071d\u0719\3\2\2\2\u071d\u071a\3")
        buf.write("\2\2\2\u071e\u010d\3\2\2\2\u071f\u0720\b\u0088\1\2\u0720")
        buf.write("\u0721\7~\2\2\u0721\u072f\3\2\2\2\u0722\u0723\f\5\2\2")
        buf.write("\u0723\u072e\5\u00f6|\2\u0724\u0725\f\4\2\2\u0725\u0727")
        buf.write("\7R\2\2\u0726\u0728\5^\60\2\u0727\u0726\3\2\2\2\u0727")
        buf.write("\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072b\7S\2\2")
        buf.write("\u072a\u072c\5\u00d6l\2\u072b\u072a\3\2\2\2\u072b\u072c")
        buf.write("\3\2\2\2\u072c\u072e\3\2\2\2\u072d\u0722\3\2\2\2\u072d")
        buf.write("\u0724\3\2\2\2\u072e\u0731\3\2\2\2\u072f\u072d\3\2\2\2")
        buf.write("\u072f\u0730\3\2\2\2\u0730\u010f\3\2\2\2\u0731\u072f\3")
        buf.write("\2\2\2\u0732\u0734\5\u0112\u008a\2\u0733\u0732\3\2\2\2")
        buf.write("\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2\u0735\u0737\7")
        buf.write("~\2\2\u0736\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u073d")
        buf.write("\3\2\2\2\u0738\u0739\5\u0112\u008a\2\u0739\u073a\7u\2")
        buf.write("\2\u073a\u073b\7~\2\2\u073b\u073d\3\2\2\2\u073c\u0733")
        buf.write("\3\2\2\2\u073c\u0738\3\2\2\2\u073d\u0111\3\2\2\2\u073e")
        buf.write("\u073f\b\u008a\1\2\u073f\u0740\5\u0114\u008b\2\u0740\u0746")
        buf.write("\3\2\2\2\u0741\u0742\f\3\2\2\u0742\u0743\7u\2\2\u0743")
        buf.write("\u0745\5\u0114\u008b\2\u0744\u0741\3\2\2\2\u0745\u0748")
        buf.write("\3\2\2\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747")
        buf.write("\u0113\3\2\2\2\u0748\u0746\3\2\2\2\u0749\u074b\5\u00d6")
        buf.write("l\2\u074a\u0749\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u074c")
        buf.write("\3\2\2\2\u074c\u074d\5\u008eH\2\u074d\u074e\5\u00f0y\2")
        buf.write("\u074e\u0769\3\2\2\2\u074f\u0751\5\u00d6l\2\u0750\u074f")
        buf.write("\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752\3\2\2\2\u0752")
        buf.write("\u0753\5\u008eH\2\u0753\u0754\5\u00f0y\2\u0754\u0755\7")
        buf.write("`\2\2\u0755\u0756\5\u011e\u0090\2\u0756\u0769\3\2\2\2")
        buf.write("\u0757\u0759\5\u00d6l\2\u0758\u0757\3\2\2\2\u0758\u0759")
        buf.write("\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075c\5\u008eH\2\u075b")
        buf.write("\u075d\5\u0106\u0084\2\u075c\u075b\3\2\2\2\u075c\u075d")
        buf.write("\3\2\2\2\u075d\u0769\3\2\2\2\u075e\u0760\5\u00d6l\2\u075f")
        buf.write("\u075e\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0761\3\2\2\2")
        buf.write("\u0761\u0763\5\u008eH\2\u0762\u0764\5\u0106\u0084\2\u0763")
        buf.write("\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0765\3\2\2\2")
        buf.write("\u0765\u0766\7`\2\2\u0766\u0767\5\u011e\u0090\2\u0767")
        buf.write("\u0769\3\2\2\2\u0768\u074a\3\2\2\2\u0768\u0750\3\2\2\2")
        buf.write("\u0768\u0758\3\2\2\2\u0768\u075f\3\2\2\2\u0769\u0115\3")
        buf.write("\2\2\2\u076a\u076c\5\u00d6l\2\u076b\u076a\3\2\2\2\u076b")
        buf.write("\u076c\3\2\2\2\u076c\u076e\3\2\2\2\u076d\u076f\5\u008e")
        buf.write("H\2\u076e\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0770")
        buf.write("\3\2\2\2\u0770\u0772\5\u00f0y\2\u0771\u0773\5\u0138\u009d")
        buf.write("\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774")
        buf.write("\3\2\2\2\u0774\u0775\5\u0118\u008d\2\u0775\u0117\3\2\2")
        buf.write("\2\u0776\u0778\5\u0150\u00a9\2\u0777\u0776\3\2\2\2\u0777")
        buf.write("\u0778\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u0782\5h\65\2")
        buf.write("\u077a\u0782\5\u0176\u00bc\2\u077b\u077c\7`\2\2\u077c")
        buf.write("\u077d\7\26\2\2\u077d\u0782\7{\2\2\u077e\u077f\7`\2\2")
        buf.write("\u077f\u0780\7\27\2\2\u0780\u0782\7{\2\2\u0781\u0777\3")
        buf.write("\2\2\2\u0781\u077a\3\2\2\2\u0781\u077b\3\2\2\2\u0781\u077e")
        buf.write("\3\2\2\2\u0782\u0119\3\2\2\2\u0783\u0789\5\u011c\u008f")
        buf.write("\2\u0784\u0785\7P\2\2\u0785\u0786\5\"\22\2\u0786\u0787")
        buf.write("\7Q\2\2\u0787\u0789\3\2\2\2\u0788\u0783\3\2\2\2\u0788")
        buf.write("\u0784\3\2\2\2\u0789\u011b\3\2\2\2\u078a\u078b\7`\2\2")
        buf.write("\u078b\u078e\5\u011e\u0090\2\u078c\u078e\5\u0122\u0092")
        buf.write("\2\u078d\u078a\3\2\2\2\u078d\u078c\3\2\2\2\u078e\u011d")
        buf.write("\3\2\2\2\u078f\u0792\5X-\2\u0790\u0792\5\u0122\u0092\2")
        buf.write("\u0791\u078f\3\2\2\2\u0791\u0790\3\2\2\2\u0792\u011f\3")
        buf.write("\2\2\2\u0793\u0794\b\u0091\1\2\u0794\u0796\5\u011e\u0090")
        buf.write("\2\u0795\u0797\7~\2\2\u0796\u0795\3\2\2\2\u0796\u0797")
        buf.write("\3\2\2\2\u0797\u07a0\3\2\2\2\u0798\u0799\f\3\2\2\u0799")
        buf.write("\u079a\7u\2\2\u079a\u079c\5\u011e\u0090\2\u079b\u079d")
        buf.write("\7~\2\2\u079c\u079b\3\2\2\2\u079c\u079d\3\2\2\2\u079d")
        buf.write("\u079f\3\2\2\2\u079e\u0798\3\2\2\2\u079f\u07a2\3\2\2\2")
        buf.write("\u07a0\u079e\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u0121\3")
        buf.write("\2\2\2\u07a2\u07a0\3\2\2\2\u07a3\u07a4\7T\2\2\u07a4\u07a6")
        buf.write("\5\u0120\u0091\2\u07a5\u07a7\7u\2\2\u07a6\u07a5\3\2\2")
        buf.write("\2\u07a6\u07a7\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07a9")
        buf.write("\7U\2\2\u07a9\u07ad\3\2\2\2\u07aa\u07ab\7T\2\2\u07ab\u07ad")
        buf.write("\7U\2\2\u07ac\u07a3\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ad")
        buf.write("\u0123\3\2\2\2\u07ae\u07b1\7\177\2\2\u07af\u07b1\5\u0164")
        buf.write("\u00b3\2\u07b0\u07ae\3\2\2\2\u07b0\u07af\3\2\2\2\u07b1")
        buf.write("\u0125\3\2\2\2\u07b2\u07b3\5\u0128\u0095\2\u07b3\u07b5")
        buf.write("\7T\2\2\u07b4\u07b6\5\u0130\u0099\2\u07b5\u07b4\3\2\2")
        buf.write("\2\u07b5\u07b6\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8")
        buf.write("\7U\2\2\u07b8\u0127\3\2\2\2\u07b9\u07bb\5\u012e\u0098")
        buf.write("\2\u07ba\u07bc\5\u00d6l\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc")
        buf.write("\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf\5\u012a\u0096")
        buf.write("\2\u07be\u07c0\5\u012c\u0097\2\u07bf\u07be\3\2\2\2\u07bf")
        buf.write("\u07c0\3\2\2\2\u07c0\u07c2\3\2\2\2\u07c1\u07c3\5\u013e")
        buf.write("\u00a0\2\u07c2\u07c1\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3")
        buf.write("\u07cc\3\2\2\2\u07c4\u07c6\5\u012e\u0098\2\u07c5\u07c7")
        buf.write("\5\u00d6l\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7")
        buf.write("\u07c9\3\2\2\2\u07c8\u07ca\5\u013e\u00a0\2\u07c9\u07c8")
        buf.write("\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb")
        buf.write("\u07b9\3\2\2\2\u07cb\u07c4\3\2\2\2\u07cc\u0129\3\2\2\2")
        buf.write("\u07cd\u07cf\5\f\7\2\u07ce\u07cd\3\2\2\2\u07ce\u07cf\3")
        buf.write("\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\5\u0124\u0093\2")
        buf.write("\u07d1\u012b\3\2\2\2\u07d2\u07d3\7!\2\2\u07d3\u012d\3")
        buf.write("\2\2\2\u07d4\u07d5\t\b\2\2\u07d5\u012f\3\2\2\2\u07d6\u07d8")
        buf.write("\5\u0132\u009a\2\u07d7\u07d9\5\u0130\u0099\2\u07d8\u07d7")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07e0\3\2\2\2\u07da")
        buf.write("\u07db\5\u0148\u00a5\2\u07db\u07dd\7y\2\2\u07dc\u07de")
        buf.write("\5\u0130\u0099\2\u07dd\u07dc\3\2\2\2\u07dd\u07de\3\2\2")
        buf.write("\2\u07de\u07e0\3\2\2\2\u07df\u07d6\3\2\2\2\u07df\u07da")
        buf.write("\3\2\2\2\u07e0\u0131\3\2\2\2\u07e1\u07e3\5\u00d6l\2\u07e2")
        buf.write("\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5\3\2\2\2")
        buf.write("\u07e4\u07e6\5\u008eH\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6")
        buf.write("\3\2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07e9\5\u0134\u009b")
        buf.write("\2\u07e8\u07e7\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea")
        buf.write("\3\2\2\2\u07ea\u07f2\7{\2\2\u07eb\u07f2\5\u0116\u008c")
        buf.write("\2\u07ec\u07f2\5\u00ceh\2\u07ed\u07f2\5\u0086D\2\u07ee")
        buf.write("\u07f2\5\u015c\u00af\2\u07ef\u07f2\5\u0082B\2\u07f0\u07f2")
        buf.write("\5\u0088E\2\u07f1\u07e2\3\2\2\2\u07f1\u07eb\3\2\2\2\u07f1")
        buf.write("\u07ec\3\2\2\2\u07f1\u07ed\3\2\2\2\u07f1\u07ee\3\2\2\2")
        buf.write("\u07f1\u07ef\3\2\2\2\u07f1\u07f0\3\2\2\2\u07f2\u0133\3")
        buf.write("\2\2\2\u07f3\u07f4\b\u009b\1\2\u07f4\u07f5\5\u0136\u009c")
        buf.write("\2\u07f5\u07fb\3\2\2\2\u07f6\u07f7\f\3\2\2\u07f7\u07f8")
        buf.write("\7u\2\2\u07f8\u07fa\5\u0136\u009c\2\u07f9\u07f6\3\2\2")
        buf.write("\2\u07fa\u07fd\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc")
        buf.write("\3\2\2\2\u07fc\u0135\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fe")
        buf.write("\u0800\5\u00f0y\2\u07ff\u0801\5\u0138\u009d\2\u0800\u07ff")
        buf.write("\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803\3\2\2\2\u0802")
        buf.write("\u0804\5\u013c\u009f\2\u0803\u0802\3\2\2\2\u0803\u0804")
        buf.write("\3\2\2\2\u0804\u0812\3\2\2\2\u0805\u0807\5\u00f0y\2\u0806")
        buf.write("\u0808\5\u011c\u008f\2\u0807\u0806\3\2\2\2\u0807\u0808")
        buf.write("\3\2\2\2\u0808\u0812\3\2\2\2\u0809\u080b\7\177\2\2\u080a")
        buf.write("\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080d\3\2\2\2")
        buf.write("\u080c\u080e\5\u00d6l\2\u080d\u080c\3\2\2\2\u080d\u080e")
        buf.write("\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0810\7y\2\2\u0810")
        buf.write("\u0812\5^\60\2\u0811\u07fe\3\2\2\2\u0811\u0805\3\2\2\2")
        buf.write("\u0811\u080a\3\2\2\2\u0812\u0137\3\2\2\2\u0813\u0814\b")
        buf.write("\u009d\1\2\u0814\u0815\5\u013a\u009e\2\u0815\u081a\3\2")
        buf.write("\2\2\u0816\u0817\f\3\2\2\u0817\u0819\5\u013a\u009e\2\u0818")
        buf.write("\u0816\3\2\2\2\u0819\u081c\3\2\2\2\u081a\u0818\3\2\2\2")
        buf.write("\u081a\u081b\3\2\2\2\u081b\u0139\3\2\2\2\u081c\u081a\3")
        buf.write("\2\2\2\u081d\u081e\t\t\2\2\u081e\u013b\3\2\2\2\u081f\u0820")
        buf.write("\7`\2\2\u0820\u0821\7\u0082\2\2\u0821\u0822\b\u009f\1")
        buf.write("\2\u0822\u013d\3\2\2\2\u0823\u0824\7y\2\2\u0824\u0825")
        buf.write("\5\u0140\u00a1\2\u0825\u013f\3\2\2\2\u0826\u0827\b\u00a1")
        buf.write("\1\2\u0827\u0829\5\u0142\u00a2\2\u0828\u082a\7~\2\2\u0829")
        buf.write("\u0828\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u0833\3\2\2\2")
        buf.write("\u082b\u082c\f\3\2\2\u082c\u082d\7u\2\2\u082d\u082f\5")
        buf.write("\u0142\u00a2\2\u082e\u0830\7~\2\2\u082f\u082e\3\2\2\2")
        buf.write("\u082f\u0830\3\2\2\2\u0830\u0832\3\2\2\2\u0831\u082b\3")
        buf.write("\2\2\2\u0832\u0835\3\2\2\2\u0833\u0831\3\2\2\2\u0833\u0834")
        buf.write("\3\2\2\2\u0834\u0141\3\2\2\2\u0835\u0833\3\2\2\2\u0836")
        buf.write("\u0838\5\u00d6l\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2")
        buf.write("\2\2\u0838\u0839\3\2\2\2\u0839\u084c\5\u0146\u00a4\2\u083a")
        buf.write("\u083c\5\u00d6l\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2")
        buf.write("\2\2\u083c\u083d\3\2\2\2\u083d\u083f\7K\2\2\u083e\u0840")
        buf.write("\5\u0148\u00a5\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2")
        buf.write("\2\u0840\u0841\3\2\2\2\u0841\u084c\5\u0146\u00a4\2\u0842")
        buf.write("\u0844\5\u00d6l\2\u0843\u0842\3\2\2\2\u0843\u0844\3\2")
        buf.write("\2\2\u0844\u0845\3\2\2\2\u0845\u0847\5\u0148\u00a5\2\u0846")
        buf.write("\u0848\7K\2\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2")
        buf.write("\u0848\u0849\3\2\2\2\u0849\u084a\5\u0146\u00a4\2\u084a")
        buf.write("\u084c\3\2\2\2\u084b\u0837\3\2\2\2\u084b\u083b\3\2\2\2")
        buf.write("\u084b\u0843\3\2\2\2\u084c\u0143\3\2\2\2\u084d\u084f\5")
        buf.write("\f\7\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850")
        buf.write("\3\2\2\2\u0850\u0853\5\u0124\u0093\2\u0851\u0853\5\u00a2")
        buf.write("R\2\u0852\u084e\3\2\2\2\u0852\u0851\3\2\2\2\u0853\u0145")
        buf.write("\3\2\2\2\u0854\u0855\5\u0144\u00a3\2\u0855\u0147\3\2\2")
        buf.write("\2\u0856\u0857\t\n\2\2\u0857\u0149\3\2\2\2\u0858\u0859")
        buf.write("\7/\2\2\u0859\u085a\5\u014c\u00a7\2\u085a\u014b\3\2\2")
        buf.write("\2\u085b\u085d\5\u009aN\2\u085c\u085e\5\u014e\u00a8\2")
        buf.write("\u085d\u085c\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u014d\3")
        buf.write("\2\2\2\u085f\u0861\5\u00fa~\2\u0860\u0862\5\u014e\u00a8")
        buf.write("\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u014f")
        buf.write("\3\2\2\2\u0863\u0864\7y\2\2\u0864\u0865\5\u0152\u00aa")
        buf.write("\2\u0865\u0151\3\2\2\2\u0866\u0868\5\u0154\u00ab\2\u0867")
        buf.write("\u0869\7~\2\2\u0868\u0867\3\2\2\2\u0868\u0869\3\2\2\2")
        buf.write("\u0869\u0872\3\2\2\2\u086a\u086c\5\u0154\u00ab\2\u086b")
        buf.write("\u086d\7~\2\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2\2")
        buf.write("\u086d\u086e\3\2\2\2\u086e\u086f\7u\2\2\u086f\u0870\5")
        buf.write("\u0152\u00aa\2\u0870\u0872\3\2\2\2\u0871\u0866\3\2\2\2")
        buf.write("\u0871\u086a\3\2\2\2\u0872\u0153\3\2\2\2\u0873\u0874\5")
        buf.write("\u0156\u00ac\2\u0874\u0876\7P\2\2\u0875\u0877\5\"\22\2")
        buf.write("\u0876\u0875\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\3")
        buf.write("\2\2\2\u0878\u0879\7Q\2\2\u0879\u087e\3\2\2\2\u087a\u087b")
        buf.write("\5\u0156\u00ac\2\u087b\u087c\5\u0122\u0092\2\u087c\u087e")
        buf.write("\3\2\2\2\u087d\u0873\3\2\2\2\u087d\u087a\3\2\2\2\u087e")
        buf.write("\u0155\3\2\2\2\u087f\u0882\5\u0144\u00a3\2\u0880\u0882")
        buf.write("\7\177\2\2\u0881\u087f\3\2\2\2\u0881\u0880\3\2\2\2\u0882")
        buf.write("\u0157\3\2\2\2\u0883\u0884\7/\2\2\u0884\u0885\5\u018c")
        buf.write("\u00c7\2\u0885\u0159\3\2\2\2\u0886\u0887\7/\2\2\u0887")
        buf.write("\u0888\7\u0088\2\2\u0888\u088c\7\177\2\2\u0889\u088a\7")
        buf.write("/\2\2\u088a\u088c\7\u008b\2\2\u088b\u0886\3\2\2\2\u088b")
        buf.write("\u0889\3\2\2\2\u088c\u015b\3\2\2\2\u088d\u088e\7?\2\2")
        buf.write("\u088e\u088f\7a\2\2\u088f\u0890\5\u015e\u00b0\2\u0890")
        buf.write("\u0891\7b\2\2\u0891\u0892\5~@\2\u0892\u015d\3\2\2\2\u0893")
        buf.write("\u0894\b\u00b0\1\2\u0894\u0895\5\u0160\u00b1\2\u0895\u089b")
        buf.write("\3\2\2\2\u0896\u0897\f\3\2\2\u0897\u0898\7u\2\2\u0898")
        buf.write("\u089a\5\u0160\u00b1\2\u0899\u0896\3\2\2\2\u089a\u089d")
        buf.write("\3\2\2\2\u089b\u0899\3\2\2\2\u089b\u089c\3\2\2\2\u089c")
        buf.write("\u015f\3\2\2\2\u089d\u089b\3\2\2\2\u089e\u08a1\5\u0162")
        buf.write("\u00b2\2\u089f\u08a1\5\u0114\u008b\2\u08a0\u089e\3\2\2")
        buf.write("\2\u08a0\u089f\3\2\2\2\u08a1\u0161\3\2\2\2\u08a2\u08a4")
        buf.write("\7\20\2\2\u08a3\u08a5\7~\2\2\u08a4\u08a3\3\2\2\2\u08a4")
        buf.write("\u08a5\3\2\2\2\u08a5\u08a7\3\2\2\2\u08a6\u08a8\7\177\2")
        buf.write("\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08d3")
        buf.write("\3\2\2\2\u08a9\u08ab\7\20\2\2\u08aa\u08ac\7\177\2\2\u08ab")
        buf.write("\u08aa\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08ad\3\2\2\2")
        buf.write("\u08ad\u08ae\7`\2\2\u08ae\u08d3\5\u0104\u0083\2\u08af")
        buf.write("\u08b1\7G\2\2\u08b0\u08b2\7~\2\2\u08b1\u08b0\3\2\2\2\u08b1")
        buf.write("\u08b2\3\2\2\2\u08b2\u08b4\3\2\2\2\u08b3\u08b5\7\177\2")
        buf.write("\2\u08b4\u08b3\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08d3")
        buf.write("\3\2\2\2\u08b6\u08b8\7G\2\2\u08b7\u08b9\7\177\2\2\u08b8")
        buf.write("\u08b7\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2")
        buf.write("\u08ba\u08bb\7`\2\2\u08bb\u08d3\5\u0104\u0083\2\u08bc")
        buf.write("\u08bd\7?\2\2\u08bd\u08be\7a\2\2\u08be\u08bf\5\u015e\u00b0")
        buf.write("\2\u08bf\u08c0\7b\2\2\u08c0\u08c2\7\20\2\2\u08c1\u08c3")
        buf.write("\7~\2\2\u08c2\u08c1\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3")
        buf.write("\u08c5\3\2\2\2\u08c4\u08c6\7\177\2\2\u08c5\u08c4\3\2\2")
        buf.write("\2\u08c5\u08c6\3\2\2\2\u08c6\u08d3\3\2\2\2\u08c7\u08c8")
        buf.write("\7?\2\2\u08c8\u08c9\7a\2\2\u08c9\u08ca\5\u015e\u00b0\2")
        buf.write("\u08ca\u08cb\7b\2\2\u08cb\u08cd\7\20\2\2\u08cc\u08ce\7")
        buf.write("\177\2\2\u08cd\u08cc\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce")
        buf.write("\u08cf\3\2\2\2\u08cf\u08d0\7`\2\2\u08d0\u08d1\5\6\4\2")
        buf.write("\u08d1\u08d3\3\2\2\2\u08d2\u08a2\3\2\2\2\u08d2\u08a9\3")
        buf.write("\2\2\2\u08d2\u08af\3\2\2\2\u08d2\u08b6\3\2\2\2\u08d2\u08bc")
        buf.write("\3\2\2\2\u08d2\u08c7\3\2\2\2\u08d3\u0163\3\2\2\2\u08d4")
        buf.write("\u08d5\5\u0168\u00b5\2\u08d5\u08d7\7a\2\2\u08d6\u08d8")
        buf.write("\5\u016a\u00b6\2\u08d7\u08d6\3\2\2\2\u08d7\u08d8\3\2\2")
        buf.write("\2\u08d8\u08d9\3\2\2\2\u08d9\u08da\7b\2\2\u08da\u0165")
        buf.write("\3\2\2\2\u08db\u08eb\5\u0164\u00b3\2\u08dc\u08dd\5\u0158")
        buf.write("\u00ad\2\u08dd\u08df\7a\2\2\u08de\u08e0\5\u016a\u00b6")
        buf.write("\2\u08df\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1")
        buf.write("\3\2\2\2\u08e1\u08e2\7b\2\2\u08e2\u08eb\3\2\2\2\u08e3")
        buf.write("\u08e4\5\u015a\u00ae\2\u08e4\u08e6\7a\2\2\u08e5\u08e7")
        buf.write("\5\u016a\u00b6\2\u08e6\u08e5\3\2\2\2\u08e6\u08e7\3\2\2")
        buf.write("\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\7b\2\2\u08e9\u08eb")
        buf.write("\3\2\2\2\u08ea\u08db\3\2\2\2\u08ea\u08dc\3\2\2\2\u08ea")
        buf.write("\u08e3\3\2\2\2\u08eb\u0167\3\2\2\2\u08ec\u08ed\7\177\2")
        buf.write("\2\u08ed\u0169\3\2\2\2\u08ee\u08ef\b\u00b6\1\2\u08ef\u08f1")
        buf.write("\5\u016c\u00b7\2\u08f0\u08f2\7~\2\2\u08f1\u08f0\3\2\2")
        buf.write("\2\u08f1\u08f2\3\2\2\2\u08f2\u08fb\3\2\2\2\u08f3\u08f4")
        buf.write("\f\3\2\2\u08f4\u08f5\7u\2\2\u08f5\u08f7\5\u016c\u00b7")
        buf.write("\2\u08f6\u08f8\7~\2\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8")
        buf.write("\3\2\2\2\u08f8\u08fa\3\2\2\2\u08f9\u08f3\3\2\2\2\u08fa")
        buf.write("\u08fd\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fb\u08fc\3\2\2\2")
        buf.write("\u08fc\u016b\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fe\u0902\5")
        buf.write("\u0104\u0083\2\u08ff\u0902\5^\60\2\u0900\u0902\5\6\4\2")
        buf.write("\u0901\u08fe\3\2\2\2\u0901\u08ff\3\2\2\2\u0901\u0900\3")
        buf.write("\2\2\2\u0902\u016d\3\2\2\2\u0903\u0904\7G\2\2\u0904\u0905")
        buf.write("\5\f\7\2\u0905\u0906\7\177\2\2\u0906\u090f\3\2\2\2\u0907")
        buf.write("\u0908\7G\2\2\u0908\u090a\5\f\7\2\u0909\u090b\7?\2\2\u090a")
        buf.write("\u0909\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\3\2\2\2")
        buf.write("\u090c\u090d\5\u0164\u00b3\2\u090d\u090f\3\2\2\2\u090e")
        buf.write("\u0903\3\2\2\2\u090e\u0907\3\2\2\2\u090f\u016f\3\2\2\2")
        buf.write("\u0910\u0912\7\37\2\2\u0911\u0910\3\2\2\2\u0911\u0912")
        buf.write("\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0914\7?\2\2\u0914")
        buf.write("\u0915\5~@\2\u0915\u0171\3\2\2\2\u0916\u0917\7?\2\2\u0917")
        buf.write("\u0918\7a\2\2\u0918\u0919\7b\2\2\u0919\u091a\5~@\2\u091a")
        buf.write("\u0173\3\2\2\2\u091b\u091c\7D\2\2\u091c\u091d\5h\65\2")
        buf.write("\u091d\u091e\5\u0178\u00bd\2\u091e\u0175\3\2\2\2\u091f")
        buf.write("\u0921\7D\2\2\u0920\u0922\5\u0150\u00a9\2\u0921\u0920")
        buf.write("\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0923\3\2\2\2\u0923")
        buf.write("\u0924\5h\65\2\u0924\u0925\5\u0178\u00bd\2\u0925\u0177")
        buf.write("\3\2\2\2\u0926\u0928\5\u017a\u00be\2\u0927\u0929\5\u0178")
        buf.write("\u00bd\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929")
        buf.write("\u0179\3\2\2\2\u092a\u092b\7\f\2\2\u092b\u092c\7P\2\2")
        buf.write("\u092c\u092d\5\u017c\u00bf\2\u092d\u092e\7Q\2\2\u092e")
        buf.write("\u092f\5h\65\2\u092f\u017b\3\2\2\2\u0930\u0932\5\u00d6")
        buf.write("l\2\u0931\u0930\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0933")
        buf.write("\3\2\2\2\u0933\u0934\5\u009aN\2\u0934\u0935\5\u00f0y\2")
        buf.write("\u0935\u093f\3\2\2\2\u0936\u0938\5\u00d6l\2\u0937\u0936")
        buf.write("\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939")
        buf.write("\u093b\5\u009aN\2\u093a\u093c\5\u0106\u0084\2\u093b\u093a")
        buf.write("\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093f\3\2\2\2\u093d")
        buf.write("\u093f\7~\2\2\u093e\u0931\3\2\2\2\u093e\u0937\3\2\2\2")
        buf.write("\u093e\u093d\3\2\2\2\u093f\u017d\3\2\2\2\u0940\u0942\7")
        buf.write("B\2\2\u0941\u0943\5X-\2\u0942\u0941\3\2\2\2\u0942\u0943")
        buf.write("\3\2\2\2\u0943\u017f\3\2\2\2\u0944\u0947\5\u0182\u00c2")
        buf.write("\2\u0945\u0947\5\u0186\u00c4\2\u0946\u0944\3\2\2\2\u0946")
        buf.write("\u0945\3\2\2\2\u0947\u0181\3\2\2\2\u0948\u0949\7B\2\2")
        buf.write("\u0949\u094b\7P\2\2\u094a\u094c\5\u0184\u00c3\2\u094b")
        buf.write("\u094a\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094d\3\2\2\2")
        buf.write("\u094d\u094e\7Q\2\2\u094e\u0183\3\2\2\2\u094f\u0950\b")
        buf.write("\u00c3\1\2\u0950\u0952\5\u0104\u0083\2\u0951\u0953\7~")
        buf.write("\2\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u095c")
        buf.write("\3\2\2\2\u0954\u0955\f\3\2\2\u0955\u0956\7u\2\2\u0956")
        buf.write("\u0958\5\u0104\u0083\2\u0957\u0959\7~\2\2\u0958\u0957")
        buf.write("\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095b\3\2\2\2\u095a")
        buf.write("\u0954\3\2\2\2\u095b\u095e\3\2\2\2\u095c\u095a\3\2\2\2")
        buf.write("\u095c\u095d\3\2\2\2\u095d\u0185\3\2\2\2\u095e\u095c\3")
        buf.write("\2\2\2\u095f\u0960\7-\2\2\u0960\u0961\7P\2\2\u0961\u0962")
        buf.write("\5^\60\2\u0962\u0963\7Q\2\2\u0963\u0966\3\2\2\2\u0964")
        buf.write("\u0966\7-\2\2\u0965\u095f\3\2\2\2\u0965\u0964\3\2\2\2")
        buf.write("\u0966\u0187\3\2\2\2\u0967\u0968\7b\2\2\u0968\u0969\7")
        buf.write("b\2\2\u0969\u0189\3\2\2\2\u096a\u096b\7b\2\2\u096b\u096c")
        buf.write("\7b\2\2\u096c\u096d\7`\2\2\u096d\u018b\3\2\2\2\u096e\u099f")
        buf.write("\7,\2\2\u096f\u099f\7\27\2\2\u0970\u0971\7,\2\2\u0971")
        buf.write("\u0972\7R\2\2\u0972\u099f\7S\2\2\u0973\u0974\7\27\2\2")
        buf.write("\u0974\u0975\7R\2\2\u0975\u099f\7S\2\2\u0976\u099f\7V")
        buf.write("\2\2\u0977\u099f\7W\2\2\u0978\u099f\7X\2\2\u0979\u099f")
        buf.write("\7Y\2\2\u097a\u099f\7Z\2\2\u097b\u099f\7[\2\2\u097c\u099f")
        buf.write("\7\\\2\2\u097d\u099f\7]\2\2\u097e\u099f\7^\2\2\u097f\u099f")
        buf.write("\7_\2\2\u0980\u099f\7`\2\2\u0981\u099f\7a\2\2\u0982\u099f")
        buf.write("\7b\2\2\u0983\u099f\7c\2\2\u0984\u099f\7d\2\2\u0985\u099f")
        buf.write("\7e\2\2\u0986\u099f\7f\2\2\u0987\u099f\7g\2\2\u0988\u099f")
        buf.write("\7h\2\2\u0989\u099f\7i\2\2\u098a\u099f\7j\2\2\u098b\u099f")
        buf.write("\7k\2\2\u098c\u099f\5\u0188\u00c5\2\u098d\u099f\5\u018a")
        buf.write("\u00c6\2\u098e\u099f\7l\2\2\u098f\u099f\7m\2\2\u0990\u099f")
        buf.write("\7n\2\2\u0991\u099f\7o\2\2\u0992\u099f\7p\2\2\u0993\u099f")
        buf.write("\7q\2\2\u0994\u099f\7r\2\2\u0995\u099f\7s\2\2\u0996\u099f")
        buf.write("\7t\2\2\u0997\u099f\7u\2\2\u0998\u099f\7v\2\2\u0999\u099f")
        buf.write("\7w\2\2\u099a\u099b\7P\2\2\u099b\u099f\7Q\2\2\u099c\u099d")
        buf.write("\7R\2\2\u099d\u099f\7S\2\2\u099e\u096e\3\2\2\2\u099e\u096f")
        buf.write("\3\2\2\2\u099e\u0970\3\2\2\2\u099e\u0973\3\2\2\2\u099e")
        buf.write("\u0976\3\2\2\2\u099e\u0977\3\2\2\2\u099e\u0978\3\2\2\2")
        buf.write("\u099e\u0979\3\2\2\2\u099e\u097a\3\2\2\2\u099e\u097b\3")
        buf.write("\2\2\2\u099e\u097c\3\2\2\2\u099e\u097d\3\2\2\2\u099e\u097e")
        buf.write("\3\2\2\2\u099e\u097f\3\2\2\2\u099e\u0980\3\2\2\2\u099e")
        buf.write("\u0981\3\2\2\2\u099e\u0982\3\2\2\2\u099e\u0983\3\2\2\2")
        buf.write("\u099e\u0984\3\2\2\2\u099e\u0985\3\2\2\2\u099e\u0986\3")
        buf.write("\2\2\2\u099e\u0987\3\2\2\2\u099e\u0988\3\2\2\2\u099e\u0989")
        buf.write("\3\2\2\2\u099e\u098a\3\2\2\2\u099e\u098b\3\2\2\2\u099e")
        buf.write("\u098c\3\2\2\2\u099e\u098d\3\2\2\2\u099e\u098e\3\2\2\2")
        buf.write("\u099e\u098f\3\2\2\2\u099e\u0990\3\2\2\2\u099e\u0991\3")
        buf.write("\2\2\2\u099e\u0992\3\2\2\2\u099e\u0993\3\2\2\2\u099e\u0994")
        buf.write("\3\2\2\2\u099e\u0995\3\2\2\2\u099e\u0996\3\2\2\2\u099e")
        buf.write("\u0997\3\2\2\2\u099e\u0998\3\2\2\2\u099e\u0999\3\2\2\2")
        buf.write("\u099e\u099a\3\2\2\2\u099e\u099c\3\2\2\2\u099f\u018d\3")
        buf.write("\2\2\2\u09a0\u09a8\7\u0080\2\2\u09a1\u09a8\7\u0086\2\2")
        buf.write("\u09a2\u09a8\7\u0087\2\2\u09a3\u09a8\7\u0088\2\2\u09a4")
        buf.write("\u09a8\5\u0190\u00c9\2\u09a5\u09a8\5\u0192\u00ca\2\u09a6")
        buf.write("\u09a8\5\u0194\u00cb\2\u09a7\u09a0\3\2\2\2\u09a7\u09a1")
        buf.write("\3\2\2\2\u09a7\u09a2\3\2\2\2\u09a7\u09a3\3\2\2\2\u09a7")
        buf.write("\u09a4\3\2\2\2\u09a7\u09a5\3\2\2\2\u09a7\u09a6\3\2\2\2")
        buf.write("\u09a8\u018f\3\2\2\2\u09a9\u09aa\t\13\2\2\u09aa\u0191")
        buf.write("\3\2\2\2\u09ab\u09ac\7.\2\2\u09ac\u0193\3\2\2\2\u09ad")
        buf.write("\u09ae\t\f\2\2\u09ae\u0195\3\2\2\2\u013e\u0197\u01a3\u01a7")
        buf.write("\u01b2\u01b6\u01c5\u01cc\u01d1\u01d3\u01d8\u01de\u01e8")
        buf.write("\u01ef\u01f5\u01f9\u01fe\u0204\u020b\u0211\u0214\u0217")
        buf.write("\u021a\u0221\u0228\u025c\u026b\u0271\u0277\u0284\u0286")
        buf.write("\u028c\u029b\u02a1\u02b0\u02be\u02c8\u02cc\u02d0\u02d3")
        buf.write("\u02d7\u02dd\u02df\u02e7\u02eb\u02ee\u02f5\u02fc\u0300")
        buf.write("\u0305\u0309\u030c\u0311\u0317\u0324\u032f\u0331\u0340")
        buf.write("\u0342\u034e\u0350\u035d\u035f\u0371\u0373\u037f\u0381")
        buf.write("\u038c\u0397\u03a2\u03ad\u03b8\u03c2\u03ca\u03d7\u03e1")
        buf.write("\u03e8\u03ec\u03f0\u03f4\u03f8\u03fd\u0400\u0403\u0408")
        buf.write("\u040f\u0413\u0419\u041f\u042a\u0441\u0445\u044d\u0453")
        buf.write("\u0467\u046b\u0478\u047c\u047f\u0486\u048e\u0498\u04a3")
        buf.write("\u04af\u04b9\u04be\u04c5\u04c8\u04cd\u04d2\u04e7\u04eb")
        buf.write("\u04f0\u04fb\u0501\u0505\u050a\u050e\u0513\u0516\u052c")
        buf.write("\u0532\u053d\u0541\u0544\u054e\u0554\u0557\u055e\u0568")
        buf.write("\u056c\u056f\u0572\u0576\u057b\u057d\u0581\u0585\u058e")
        buf.write("\u059b\u05a3\u05a9\u05af\u05b3\u05b6\u05bf\u05c8\u05d0")
        buf.write("\u05db\u05e1\u05ec\u05ef\u05f4\u0603\u0609\u0612\u061c")
        buf.write("\u0622\u062a\u062e\u0632\u0637\u063c\u0643\u0645\u064a")
        buf.write("\u064e\u065c\u0662\u0671\u067b\u0680\u0687\u068d\u0692")
        buf.write("\u0698\u069f\u06a3\u06a5\u06a7\u06ae\u06b1\u06b4\u06b7")
        buf.write("\u06bc\u06c0\u06c3\u06c7\u06cb\u06d0\u06d3\u06d5\u06d9")
        buf.write("\u06e0\u06e6\u06ea\u06f0\u06f5\u06f7\u06fd\u0701\u0707")
        buf.write("\u070e\u0712\u0714\u0716\u071d\u0727\u072b\u072d\u072f")
        buf.write("\u0733\u0736\u073c\u0746\u074a\u0750\u0758\u075c\u075f")
        buf.write("\u0763\u0768\u076b\u076e\u0772\u0777\u0781\u0788\u078d")
        buf.write("\u0791\u0796\u079c\u07a0\u07a6\u07ac\u07b0\u07b5\u07bb")
        buf.write("\u07bf\u07c2\u07c6\u07c9\u07cb\u07ce\u07d8\u07dd\u07df")
        buf.write("\u07e2\u07e5\u07e8\u07f1\u07fb\u0800\u0803\u0807\u080a")
        buf.write("\u080d\u0811\u081a\u0829\u082f\u0833\u0837\u083b\u083f")
        buf.write("\u0843\u0847\u084b\u084e\u0852\u085d\u0861\u0868\u086c")
        buf.write("\u0871\u0876\u087d\u0881\u088b\u089b\u08a0\u08a4\u08a7")
        buf.write("\u08ab\u08b1\u08b4\u08b8\u08c2\u08c5\u08cd\u08d2\u08d7")
        buf.write("\u08df\u08e6\u08ea\u08f1\u08f7\u08fb\u0901\u090a\u090e")
        buf.write("\u0911\u0921\u0928\u0931\u0937\u093b\u093e\u0942\u0946")
        buf.write("\u094b\u0952\u0958\u095c\u0965\u099e\u09a7")
        return buf.getvalue()


class CPP14Parser ( Parser ):

    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'alignas'", 
                     "'alignof'", "'asm'", "'auto'", "'bool'", "'break'", 
                     "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
                     "'class'", "'const'", "'constexpr'", "'const_cast'", 
                     "'continue'", "'decltype'", "'default'", "'delete'", 
                     "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                     "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
                     "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
                     "'noexcept'", "<INVALID>", "'operator'", "'override'", 
                     "'private'", "'protected'", "'public'", "'register'", 
                     "'reinterpret_cast'", "'return'", "'short'", "'signed'", 
                     "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
                     "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
                     "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", 
                     "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
                     "'void'", "'volatile'", "'wchar_t'", "'while'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='", 
                     "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", 
                     "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "','", 
                     "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'", 
                     "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "MultiLineMacro", "Directive", "Alignas", 
                      "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
                      "Catch", "Char", "Char16", "Char32", "Class", "Const", 
                      "Constexpr", "Const_cast", "Continue", "Decltype", 
                      "Default", "Delete", "Do", "Double", "Dynamic_cast", 
                      "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken", 
                      "Final", "Float", "For", "Friend", "Goto", "If", "Inline", 
                      "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
                      "Nullptr", "Operator", "Override", "Private", "Protected", 
                      "Public", "Register", "Reinterpret_cast", "Return", 
                      "Short", "Signed", "Sizeof", "Static", "Static_assert", 
                      "Static_cast", "Struct", "Switch", "Template", "This", 
                      "Thread_local", "Throw", "TrueToken", "Try", "Typedef", 
                      "Typeid", "Typename", "Union", "Unsigned", "Using", 
                      "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
                      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
                      "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
                      "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                      "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", 
                      "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
                      "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", 
                      "Arrow", "Question", "Colon", "Doublecolon", "Semi", 
                      "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral", 
                      "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
                      "Binaryliteral", "Integersuffix", "Characterliteral", 
                      "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral", 
                      "Userdefinedfloatingliteral", "Userdefinedstringliteral", 
                      "Userdefinedcharacterliteral", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_expressionlist = 16
    RULE_pseudodestructorname = 17
    RULE_unaryexpression = 18
    RULE_sizeofExpression = 19
    RULE_alignofExpression = 20
    RULE_unaryoperator = 21
    RULE_newexpression = 22
    RULE_newplacement = 23
    RULE_newtypeid = 24
    RULE_newdeclarator = 25
    RULE_noptrnewdeclarator = 26
    RULE_newinitializer = 27
    RULE_deleteexpression = 28
    RULE_noexceptexpression = 29
    RULE_castexpression = 30
    RULE_pmexpression = 31
    RULE_multiplicativeexpression = 32
    RULE_additiveexpression = 33
    RULE_shiftexpression = 34
    RULE_relationalexpression = 35
    RULE_equalityexpression = 36
    RULE_andexpression = 37
    RULE_exclusiveorexpression = 38
    RULE_inclusiveorexpression = 39
    RULE_logicalandexpression = 40
    RULE_logicalorexpression = 41
    RULE_conditionalexpression = 42
    RULE_assignmentexpression = 43
    RULE_assignmentoperator = 44
    RULE_expression = 45
    RULE_constantexpression = 46
    RULE_statement = 47
    RULE_label = 48
    RULE_labeledstatement = 49
    RULE_expressionstatement = 50
    RULE_compoundstatement = 51
    RULE_statementseq = 52
    RULE_selectionstatement = 53
    RULE_condition = 54
    RULE_iterationstatement = 55
    RULE_forinitstatement = 56
    RULE_forrangedeclaration = 57
    RULE_forrangeinitializer = 58
    RULE_jumpstatement = 59
    RULE_declarationstatement = 60
    RULE_declarationseq = 61
    RULE_declaration = 62
    RULE_blockdeclaration = 63
    RULE_aliasdeclaration = 64
    RULE_simpledeclaration = 65
    RULE_static_assertdeclaration = 66
    RULE_emptydeclaration = 67
    RULE_attributedeclaration = 68
    RULE_declspecifier = 69
    RULE_declspecifierseq = 70
    RULE_storageclassspecifier = 71
    RULE_functionspecifier = 72
    RULE_typedefname = 73
    RULE_typespecifier = 74
    RULE_trailingtypespecifier = 75
    RULE_typespecifierseq = 76
    RULE_trailingtypespecifierseq = 77
    RULE_simpletypespecifier = 78
    RULE_thetypename = 79
    RULE_decltypespecifier = 80
    RULE_elaboratedtypespecifier = 81
    RULE_enumname = 82
    RULE_enumspecifier = 83
    RULE_enumhead = 84
    RULE_opaqueenumdeclaration = 85
    RULE_enumkey = 86
    RULE_enumbase = 87
    RULE_enumeratorlist = 88
    RULE_enumeratordefinition = 89
    RULE_enumerator = 90
    RULE_namespacename = 91
    RULE_originalnamespacename = 92
    RULE_namespacedefinition = 93
    RULE_namednamespacedefinition = 94
    RULE_originalnamespacedefinition = 95
    RULE_extensionnamespacedefinition = 96
    RULE_unnamednamespacedefinition = 97
    RULE_namespacebody = 98
    RULE_namespacealias = 99
    RULE_namespacealiasdefinition = 100
    RULE_qualifiednamespacespecifier = 101
    RULE_usingdeclaration = 102
    RULE_usingdirective = 103
    RULE_asmdefinition = 104
    RULE_linkagespecification = 105
    RULE_attributespecifierseq = 106
    RULE_attributespecifier = 107
    RULE_alignmentspecifier = 108
    RULE_attributelist = 109
    RULE_attribute = 110
    RULE_attributetoken = 111
    RULE_attributescopedtoken = 112
    RULE_attributenamespace = 113
    RULE_attributeargumentclause = 114
    RULE_balancedtokenseq = 115
    RULE_balancedtoken = 116
    RULE_initdeclaratorlist = 117
    RULE_initdeclarator = 118
    RULE_declarator = 119
    RULE_ptrdeclarator = 120
    RULE_noptrdeclarator = 121
    RULE_parametersandqualifiers = 122
    RULE_trailingreturntype = 123
    RULE_ptroperator = 124
    RULE_cvqualifierseq = 125
    RULE_cvqualifier = 126
    RULE_refqualifier = 127
    RULE_declaratorid = 128
    RULE_thetypeid = 129
    RULE_abstractdeclarator = 130
    RULE_ptrabstractdeclarator = 131
    RULE_noptrabstractdeclarator = 132
    RULE_abstractpackdeclarator = 133
    RULE_noptrabstractpackdeclarator = 134
    RULE_parameterdeclarationclause = 135
    RULE_parameterdeclarationlist = 136
    RULE_parameterdeclaration = 137
    RULE_functiondefinition = 138
    RULE_functionbody = 139
    RULE_initializer = 140
    RULE_braceorequalinitializer = 141
    RULE_initializerclause = 142
    RULE_initializerlist = 143
    RULE_bracedinitlist = 144
    RULE_classname = 145
    RULE_classspecifier = 146
    RULE_classhead = 147
    RULE_classheadname = 148
    RULE_classvirtspecifier = 149
    RULE_classkey = 150
    RULE_memberspecification = 151
    RULE_memberdeclaration = 152
    RULE_memberdeclaratorlist = 153
    RULE_memberdeclarator = 154
    RULE_virtspecifierseq = 155
    RULE_virtspecifier = 156
    RULE_purespecifier = 157
    RULE_baseclause = 158
    RULE_basespecifierlist = 159
    RULE_basespecifier = 160
    RULE_classordecltype = 161
    RULE_basetypespecifier = 162
    RULE_accessspecifier = 163
    RULE_conversionfunctionid = 164
    RULE_conversiontypeid = 165
    RULE_conversiondeclarator = 166
    RULE_ctorinitializer = 167
    RULE_meminitializerlist = 168
    RULE_meminitializer = 169
    RULE_meminitializerid = 170
    RULE_operatorfunctionid = 171
    RULE_literaloperatorid = 172
    RULE_templatedeclaration = 173
    RULE_templateparameterlist = 174
    RULE_templateparameter = 175
    RULE_typeparameter = 176
    RULE_simpletemplateid = 177
    RULE_templateid = 178
    RULE_templatename = 179
    RULE_templateargumentlist = 180
    RULE_templateargument = 181
    RULE_typenamespecifier = 182
    RULE_explicitinstantiation = 183
    RULE_explicitspecialization = 184
    RULE_tryblock = 185
    RULE_functiontryblock = 186
    RULE_handlerseq = 187
    RULE_handler = 188
    RULE_exceptiondeclaration = 189
    RULE_throwexpression = 190
    RULE_exceptionspecification = 191
    RULE_dynamicexceptionspecification = 192
    RULE_typeidlist = 193
    RULE_noexceptspecification = 194
    RULE_rightShift = 195
    RULE_rightShiftAssign = 196
    RULE_theoperator = 197
    RULE_literal = 198
    RULE_booleanliteral = 199
    RULE_pointerliteral = 200
    RULE_userdefinedliteral = 201

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "expressionlist", "pseudodestructorname", "unaryexpression", 
                   "sizeofExpression", "alignofExpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "relationalexpression", "equalityexpression", "andexpression", 
                   "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression", 
                   "logicalorexpression", "conditionalexpression", "assignmentexpression", 
                   "assignmentoperator", "expression", "constantexpression", 
                   "statement", "label", "labeledstatement", "expressionstatement", 
                   "compoundstatement", "statementseq", "selectionstatement", 
                   "condition", "iterationstatement", "forinitstatement", 
                   "forrangedeclaration", "forrangeinitializer", "jumpstatement", 
                   "declarationstatement", "declarationseq", "declaration", 
                   "blockdeclaration", "aliasdeclaration", "simpledeclaration", 
                   "static_assertdeclaration", "emptydeclaration", "attributedeclaration", 
                   "declspecifier", "declspecifierseq", "storageclassspecifier", 
                   "functionspecifier", "typedefname", "typespecifier", 
                   "trailingtypespecifier", "typespecifierseq", "trailingtypespecifierseq", 
                   "simpletypespecifier", "thetypename", "decltypespecifier", 
                   "elaboratedtypespecifier", "enumname", "enumspecifier", 
                   "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
                   "enumeratorlist", "enumeratordefinition", "enumerator", 
                   "namespacename", "originalnamespacename", "namespacedefinition", 
                   "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "rightShift", 
                   "rightShiftAssign", "theoperator", "literal", "booleanliteral", 
                   "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    MultiLineMacro=1
    Directive=2
    Alignas=3
    Alignof=4
    Asm=5
    Auto=6
    Bool=7
    Break=8
    Case=9
    Catch=10
    Char=11
    Char16=12
    Char32=13
    Class=14
    Const=15
    Constexpr=16
    Const_cast=17
    Continue=18
    Decltype=19
    Default=20
    Delete=21
    Do=22
    Double=23
    Dynamic_cast=24
    Else=25
    Enum=26
    Explicit=27
    Export=28
    Extern=29
    FalseToken=30
    Final=31
    Float=32
    For=33
    Friend=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Long=39
    Mutable=40
    Namespace=41
    New=42
    Noexcept=43
    Nullptr=44
    Operator=45
    Override=46
    Private=47
    Protected=48
    Public=49
    Register=50
    Reinterpret_cast=51
    Return=52
    Short=53
    Signed=54
    Sizeof=55
    Static=56
    Static_assert=57
    Static_cast=58
    Struct=59
    Switch=60
    Template=61
    This=62
    Thread_local=63
    Throw=64
    TrueToken=65
    Try=66
    Typedef=67
    Typeid=68
    Typename=69
    Union=70
    Unsigned=71
    Using=72
    Virtual=73
    Void=74
    Volatile=75
    Wchar=76
    While=77
    LeftParen=78
    RightParen=79
    LeftBracket=80
    RightBracket=81
    LeftBrace=82
    RightBrace=83
    Plus=84
    Minus=85
    Star=86
    Div=87
    Mod=88
    Caret=89
    And=90
    Or=91
    Tilde=92
    Not=93
    Assign=94
    Less=95
    Greater=96
    PlusAssign=97
    MinusAssign=98
    StarAssign=99
    DivAssign=100
    ModAssign=101
    XorAssign=102
    AndAssign=103
    OrAssign=104
    LeftShift=105
    LeftShiftAssign=106
    Equal=107
    NotEqual=108
    LessEqual=109
    GreaterEqual=110
    AndAnd=111
    OrOr=112
    PlusPlus=113
    MinusMinus=114
    Comma=115
    ArrowStar=116
    Arrow=117
    Question=118
    Colon=119
    Doublecolon=120
    Semi=121
    Dot=122
    DotStar=123
    Ellipsis=124
    Identifier=125
    Integerliteral=126
    Decimalliteral=127
    Octalliteral=128
    Hexadecimalliteral=129
    Binaryliteral=130
    Integersuffix=131
    Characterliteral=132
    Floatingliteral=133
    Stringliteral=134
    Userdefinedintegerliteral=135
    Userdefinedfloatingliteral=136
    Userdefinedstringliteral=137
    Userdefinedcharacterliteral=138
    Whitespace=139
    Newline=140
    BlockComment=141
    LineComment=142

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationunit" ):
                return visitor.visitTranslationunit(self)
            else:
                return visitor.visitChildren(self)




    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 404
                self.declarationseq(0)


            self.state = 407
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralContext,0)


        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression" ):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression" ):
                listener.exitPrimaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression" ):
                return visitor.visitPrimaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryexpression(self):

        localctx = CPP14Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.FalseToken, CPP14Parser.Nullptr, CPP14Parser.TrueToken, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.literal()
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.match(CPP14Parser.This)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.match(CPP14Parser.LeftParen)
                self.state = 412
                self.expression(0)
                self.state = 413
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 415
                self.idexpression()
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 416
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression" ):
                listener.enterIdexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression" ):
                listener.exitIdexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression" ):
                return visitor.visitIdexpression(self)
            else:
                return visitor.visitChildren(self)




    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid" ):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid" ):
                listener.exitUnqualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid" ):
                return visitor.visitUnqualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 426
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 427
                self.match(CPP14Parser.Tilde)
                self.state = 428
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 429
                self.match(CPP14Parser.Tilde)
                self.state = 430
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 431
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedid" ):
                return visitor.visitQualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.nestednamespecifier(0)
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Template:
                self.state = 435
                self.match(CPP14Parser.Template)


            self.state = 438
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NormalGlobalIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalGlobalIdentifier" ):
                listener.enterNormalGlobalIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalGlobalIdentifier" ):
                listener.exitNormalGlobalIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalGlobalIdentifier" ):
                return visitor.visitNormalGlobalIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ClassIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassIdentifier" ):
                listener.enterClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassIdentifier" ):
                listener.exitClassIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassIdentifier" ):
                return visitor.visitClassIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class NestedIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)
        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedIdentifier" ):
                listener.enterNestedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedIdentifier" ):
                listener.exitNestedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class NamespaceIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceIdentifier" ):
                listener.enterNamespaceIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceIdentifier" ):
                listener.exitNamespaceIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceIdentifier" ):
                return visitor.visitNamespaceIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class NestedTemplateIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)
        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedTemplateIdentifier" ):
                listener.enterNestedTemplateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedTemplateIdentifier" ):
                listener.exitNestedTemplateIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedTemplateIdentifier" ):
                return visitor.visitNestedTemplateIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DecltypeIdentifierContext(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypeIdentifier" ):
                listener.enterDecltypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypeIdentifier" ):
                listener.exitDecltypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypeIdentifier" ):
                return visitor.visitDecltypeIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.NormalGlobalIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 441
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                localctx = CPP14Parser.ClassIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 442
                self.thetypename()
                self.state = 443
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                localctx = CPP14Parser.NamespaceIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 445
                self.namespacename()
                self.state = 446
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                localctx = CPP14Parser.DecltypeIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 448
                self.decltypespecifier()
                self.state = 449
                self.match(CPP14Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 463
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestedIdentifierContext(self, CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 453
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 454
                        self.match(CPP14Parser.Identifier)
                        self.state = 455
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestedTemplateIdentifierContext(self, CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 456
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 457
                            self.match(CPP14Parser.Template)


                        self.state = 460
                        self.simpletemplateid()
                        self.state = 461
                        self.match(CPP14Parser.Doublecolon)
                        pass

             
                self.state = 467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaexpression" ):
                return visitor.visitLambdaexpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaexpression(self):

        localctx = CPP14Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.lambdaintroducer()
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen:
                self.state = 469
                self.lambdadeclarator()


            self.state = 472
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaintroducer" ):
                return visitor.visitLambdaintroducer(self)
            else:
                return visitor.visitChildren(self)




    def lambdaintroducer(self):

        localctx = CPP14Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(CPP14Parser.LeftBracket)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CPP14Parser.This - 62)) | (1 << (CPP14Parser.And - 62)) | (1 << (CPP14Parser.Assign - 62)) | (1 << (CPP14Parser.Identifier - 62)))) != 0):
                self.state = 475
                self.lambdacapture()


            self.state = 478
            self.match(CPP14Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture" ):
                listener.enterLambdacapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture" ):
                listener.exitLambdacapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture" ):
                return visitor.visitLambdacapture(self)
            else:
                return visitor.visitChildren(self)




    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 482
                self.capturedefault()
                self.state = 483
                self.match(CPP14Parser.Comma)
                self.state = 484
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault" ):
                listener.enterCapturedefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault" ):
                listener.exitCapturedefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault" ):
                return visitor.visitCapturedefault(self)
            else:
                return visitor.visitChildren(self)




    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist" ):
                listener.enterCapturelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist" ):
                listener.exitCapturelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist" ):
                return visitor.visitCapturelist(self)
            else:
                return visitor.visitChildren(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.capture()
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 492
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 495
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 496
                    self.match(CPP14Parser.Comma)
                    self.state = 497
                    self.capture()
                    self.state = 499
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 498
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14Parser.SimplecaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(CPP14Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture" ):
                return visitor.visitCapture(self)
            else:
                return visitor.visitChildren(self)




    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.simplecapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simplecapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture" ):
                listener.enterSimplecapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture" ):
                listener.exitSimplecapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture" ):
                return visitor.visitSimplecapture(self)
            else:
                return visitor.visitChildren(self)




    def simplecapture(self):

        localctx = CPP14Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.match(CPP14Parser.And)
                self.state = 512
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture" ):
                return visitor.visitInitcapture(self)
            else:
                return visitor.visitChildren(self)




    def initcapture(self):

        localctx = CPP14Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.match(CPP14Parser.Identifier)
                self.state = 517
                self.initializer()
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(CPP14Parser.And)
                self.state = 519
                self.match(CPP14Parser.Identifier)
                self.state = 520
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdadeclarator" ):
                return visitor.visitLambdadeclarator(self)
            else:
                return visitor.visitChildren(self)




    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(CPP14Parser.LeftParen)
            self.state = 524
            self.parameterdeclarationclause()
            self.state = 525
            self.match(CPP14Parser.RightParen)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Mutable:
                self.state = 526
                self.match(CPP14Parser.Mutable)


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Noexcept or _la==CPP14Parser.Throw:
                self.state = 529
                self.exceptionspecification()


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 532
                self.attributespecifierseq(0)


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Arrow:
                self.state = 535
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MemberAccessContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def Dot(self):
            return self.getToken(CPP14Parser.Dot, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class PostTypeCastExpressionContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostTypeCastExpression" ):
                listener.enterPostTypeCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostTypeCastExpression" ):
                listener.exitPostTypeCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostTypeCastExpression" ):
                return visitor.visitPostTypeCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class IncDecOpContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)
        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecOp" ):
                listener.enterIncDecOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecOp" ):
                listener.exitIncDecOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncDecOp" ):
                return visitor.visitIncDecOp(self)
            else:
                return visitor.visitChildren(self)


    class TypeidExpressionContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidExpression" ):
                listener.enterTypeidExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidExpression" ):
                listener.exitTypeidExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidExpression" ):
                return visitor.visitTypeidExpression(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class PostSimpleCastExpressionContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostSimpleCastExpression" ):
                listener.enterPostSimpleCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostSimpleCastExpression" ):
                listener.exitPostSimpleCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostSimpleCastExpression" ):
                return visitor.visitPostSimpleCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class CppCastExpressionContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)
        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)
        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)
        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCppCastExpression" ):
                listener.enterCppCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCppCastExpression" ):
                listener.exitCppCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCppCastExpression" ):
                return visitor.visitCppCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArrayIndexingContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayIndexing" ):
                listener.enterArrayIndexing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayIndexing" ):
                listener.exitArrayIndexing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayIndexing" ):
                return visitor.visitArrayIndexing(self)
            else:
                return visitor.visitChildren(self)


    class PtrMemberAccessContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrMemberAccess" ):
                listener.enterPtrMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrMemberAccess" ):
                listener.exitPtrMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrMemberAccess" ):
                return visitor.visitPtrMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class PostfixIgnoreContext(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryexpressionContext,0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixIgnore" ):
                listener.enterPostfixIgnore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixIgnore" ):
                listener.exitPostfixIgnore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixIgnore" ):
                return visitor.visitPostfixIgnore(self)
            else:
                return visitor.visitChildren(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.PostfixIgnoreContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 539
                self.primaryexpression()
                pass

            elif la_ == 2:
                localctx = CPP14Parser.PostSimpleCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 540
                self.simpletypespecifier()
                self.state = 541
                self.match(CPP14Parser.LeftParen)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 542
                    self.expressionlist()


                self.state = 545
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                localctx = CPP14Parser.PostTypeCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 547
                self.typenamespecifier()
                self.state = 548
                self.match(CPP14Parser.LeftParen)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 549
                    self.expressionlist()


                self.state = 552
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                localctx = CPP14Parser.PostfixIgnoreContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 554
                self.simpletypespecifier()
                self.state = 555
                self.bracedinitlist()
                pass

            elif la_ == 5:
                localctx = CPP14Parser.PostfixIgnoreContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 557
                self.typenamespecifier()
                self.state = 558
                self.bracedinitlist()
                pass

            elif la_ == 6:
                localctx = CPP14Parser.CppCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 560
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 561
                self.match(CPP14Parser.Less)
                self.state = 562
                self.thetypeid()
                self.state = 563
                self.match(CPP14Parser.Greater)
                self.state = 564
                self.match(CPP14Parser.LeftParen)
                self.state = 565
                self.expression(0)
                self.state = 566
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                localctx = CPP14Parser.CppCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 568
                self.match(CPP14Parser.Static_cast)
                self.state = 569
                self.match(CPP14Parser.Less)
                self.state = 570
                self.thetypeid()
                self.state = 571
                self.match(CPP14Parser.Greater)
                self.state = 572
                self.match(CPP14Parser.LeftParen)
                self.state = 573
                self.expression(0)
                self.state = 574
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                localctx = CPP14Parser.CppCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 576
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 577
                self.match(CPP14Parser.Less)
                self.state = 578
                self.thetypeid()
                self.state = 579
                self.match(CPP14Parser.Greater)
                self.state = 580
                self.match(CPP14Parser.LeftParen)
                self.state = 581
                self.expression(0)
                self.state = 582
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                localctx = CPP14Parser.CppCastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 584
                self.match(CPP14Parser.Const_cast)
                self.state = 585
                self.match(CPP14Parser.Less)
                self.state = 586
                self.thetypeid()
                self.state = 587
                self.match(CPP14Parser.Greater)
                self.state = 588
                self.match(CPP14Parser.LeftParen)
                self.state = 589
                self.expression(0)
                self.state = 590
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 10:
                localctx = CPP14Parser.TypeidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 592
                self.match(CPP14Parser.Typeid)
                self.state = 593
                self.match(CPP14Parser.LeftParen)
                self.state = 594
                self.expression(0)
                self.state = 595
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                localctx = CPP14Parser.TypeidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 597
                self.match(CPP14Parser.Typeid)
                self.state = 598
                self.match(CPP14Parser.LeftParen)
                self.state = 599
                self.thetypeid()
                self.state = 600
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 642
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ArrayIndexingContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 604
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 605
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 606
                        self.expression(0)
                        self.state = 607
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixIgnoreContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 609
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 610
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 611
                        self.bracedinitlist()
                        self.state = 612
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.FunctionCallContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 614
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 615
                        self.match(CPP14Parser.LeftParen)
                        self.state = 617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 616
                            self.expressionlist()


                        self.state = 619
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.MemberAccessContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 620
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 621
                        self.match(CPP14Parser.Dot)
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 622
                            self.match(CPP14Parser.Template)


                        self.state = 625
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PtrMemberAccessContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 626
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 627
                        self.match(CPP14Parser.Arrow)
                        self.state = 629
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 628
                            self.match(CPP14Parser.Template)


                        self.state = 631
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.MemberAccessContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 632
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 633
                        self.match(CPP14Parser.Dot)
                        self.state = 634
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PtrMemberAccessContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 635
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 636
                        self.match(CPP14Parser.Arrow)
                        self.state = 637
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.IncDecOpContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 638
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 639
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.IncDecOpContext(self, CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 640
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 641
                        self.match(CPP14Parser.MinusMinus)
                        pass

             
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionlist" ):
                return visitor.visitExpressionlist(self)
            else:
                return visitor.visitChildren(self)




    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,i)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname" ):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname" ):
                listener.exitPseudodestructorname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname" ):
                return visitor.visitPseudodestructorname(self)
            else:
                return visitor.visitChildren(self)




    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 649
                    self.nestednamespecifier(0)


                self.state = 652
                self.thetypename()
                self.state = 653
                self.match(CPP14Parser.Doublecolon)
                self.state = 654
                self.match(CPP14Parser.Tilde)
                self.state = 655
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.nestednamespecifier(0)
                self.state = 658
                self.match(CPP14Parser.Template)
                self.state = 659
                self.simpletemplateid()
                self.state = 660
                self.match(CPP14Parser.Doublecolon)
                self.state = 661
                self.match(CPP14Parser.Tilde)
                self.state = 662
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 664
                    self.nestednamespecifier(0)


                self.state = 667
                self.match(CPP14Parser.Tilde)
                self.state = 668
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 669
                self.match(CPP14Parser.Tilde)
                self.state = 670
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext,0)


        def sizeofExpression(self):
            return self.getTypedRuleContext(CPP14Parser.SizeofExpressionContext,0)


        def alignofExpression(self):
            return self.getTypedRuleContext(CPP14Parser.AlignofExpressionContext,0)


        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptexpressionContext,0)


        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext,0)


        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression" ):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression" ):
                listener.exitUnaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression" ):
                return visitor.visitUnaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unaryexpression)
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(CPP14Parser.PlusPlus)
                self.state = 675
                self.castexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.match(CPP14Parser.MinusMinus)
                self.state = 677
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.unaryoperator()
                self.state = 679
                self.castexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 681
                self.sizeofExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 682
                self.alignofExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 683
                self.noexceptexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 684
                self.newexpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 685
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_sizeofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeofExpression" ):
                return visitor.visitSizeofExpression(self)
            else:
                return visitor.visitChildren(self)




    def sizeofExpression(self):

        localctx = CPP14Parser.SizeofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_sizeofExpression)
        try:
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.match(CPP14Parser.Sizeof)
                self.state = 689
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.match(CPP14Parser.Sizeof)
                self.state = 691
                self.match(CPP14Parser.LeftParen)
                self.state = 692
                self.thetypeid()
                self.state = 693
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.match(CPP14Parser.Sizeof)
                self.state = 696
                self.match(CPP14Parser.Ellipsis)
                self.state = 697
                self.match(CPP14Parser.LeftParen)
                self.state = 698
                self.match(CPP14Parser.Identifier)
                self.state = 699
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_alignofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignofExpression" ):
                listener.enterAlignofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignofExpression" ):
                listener.exitAlignofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignofExpression" ):
                return visitor.visitAlignofExpression(self)
            else:
                return visitor.visitChildren(self)




    def alignofExpression(self):

        localctx = CPP14Parser.AlignofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_alignofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(CPP14Parser.Alignof)
            self.state = 703
            self.match(CPP14Parser.LeftParen)
            self.state = 704
            self.thetypeid()
            self.state = 705
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator" ):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator" ):
                listener.exitUnaryoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator" ):
                return visitor.visitUnaryoperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unaryoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Not - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def newtypeid(self):
            return self.getTypedRuleContext(CPP14Parser.NewtypeidContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext,0)


        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression" ):
                listener.enterNewexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression" ):
                listener.exitNewexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression" ):
                return visitor.visitNewexpression(self)
            else:
                return visitor.visitChildren(self)




    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 709
                    self.match(CPP14Parser.Doublecolon)


                self.state = 712
                self.match(CPP14Parser.New)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.LeftParen:
                    self.state = 713
                    self.newplacement()


                self.state = 716
                self.newtypeid()
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.newinitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 720
                    self.match(CPP14Parser.Doublecolon)


                self.state = 723
                self.match(CPP14Parser.New)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 724
                    self.newplacement()


                self.state = 727
                self.match(CPP14Parser.LeftParen)
                self.state = 728
                self.thetypeid()
                self.state = 729
                self.match(CPP14Parser.RightParen)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewplacement" ):
                return visitor.visitNewplacement(self)
            else:
                return visitor.visitChildren(self)




    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(CPP14Parser.LeftParen)
            self.state = 736
            self.expressionlist()
            self.state = 737
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtypeid" ):
                return visitor.visitNewtypeid(self)
            else:
                return visitor.visitChildren(self)




    def newtypeid(self):

        localctx = CPP14Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.typespecifierseq()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 740
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PtrNewDeclaratorContext(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrNewDeclarator" ):
                listener.enterPtrNewDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrNewDeclarator" ):
                listener.exitPtrNewDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrNewDeclarator" ):
                return visitor.visitPtrNewDeclarator(self)
            else:
                return visitor.visitChildren(self)


    class NonPtrNewDeclaratorContext(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonPtrNewDeclarator" ):
                listener.enterNonPtrNewDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonPtrNewDeclarator" ):
                listener.exitNonPtrNewDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonPtrNewDeclarator" ):
                return visitor.visitNonPtrNewDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newdeclarator)
        try:
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                localctx = CPP14Parser.PtrNewDeclaratorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.ptroperator()
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 744
                    self.newdeclarator()


                pass
            elif token in [CPP14Parser.LeftBracket]:
                localctx = CPP14Parser.NonPtrNewDeclaratorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator" ):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator" ):
                listener.exitNoptrnewdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator" ):
                return visitor.visitNoptrnewdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(CPP14Parser.LeftBracket)
            self.state = 752
            self.expression(0)
            self.state = 753
            self.match(CPP14Parser.RightBracket)
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 754
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 757
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 758
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 759
                    self.constantexpression()
                    self.state = 760
                    self.match(CPP14Parser.RightBracket)
                    self.state = 762
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 761
                        self.attributespecifierseq(0)

             
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer" ):
                listener.enterNewinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer" ):
                listener.exitNewinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer" ):
                return visitor.visitNewinitializer(self)
            else:
                return visitor.visitChildren(self)




    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(CPP14Parser.LeftParen)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 770
                    self.expressionlist()


                self.state = 773
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression" ):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression" ):
                listener.exitDeleteexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression" ):
                return visitor.visitDeleteexpression(self)
            else:
                return visitor.visitChildren(self)




    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 777
                    self.match(CPP14Parser.Doublecolon)


                self.state = 780
                self.match(CPP14Parser.Delete)
                self.state = 781
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 782
                    self.match(CPP14Parser.Doublecolon)


                self.state = 785
                self.match(CPP14Parser.Delete)
                self.state = 786
                self.match(CPP14Parser.LeftBracket)
                self.state = 787
                self.match(CPP14Parser.RightBracket)
                self.state = 788
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptexpression" ):
                return visitor.visitNoexceptexpression(self)
            else:
                return visitor.visitChildren(self)




    def noexceptexpression(self):

        localctx = CPP14Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(CPP14Parser.Noexcept)
            self.state = 792
            self.match(CPP14Parser.LeftParen)
            self.state = 793
            self.expression(0)
            self.state = 794
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression" ):
                listener.enterCastexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression" ):
                listener.exitCastexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression" ):
                return visitor.visitCastexpression(self)
            else:
                return visitor.visitChildren(self)




    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castexpression)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(CPP14Parser.LeftParen)
                self.state = 798
                self.thetypeid()
                self.state = 799
                self.match(CPP14Parser.RightParen)
                self.state = 800
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def DotStar(self):
            return self.getToken(CPP14Parser.DotStar, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression" ):
                listener.enterPmexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression" ):
                listener.exitPmexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression" ):
                return visitor.visitPmexpression(self)
            else:
                return visitor.visitChildren(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 813
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 807
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 808
                        self.match(CPP14Parser.DotStar)
                        self.state = 809
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 810
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 811
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 812
                        self.castexpression()
                        pass

             
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression" ):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression" ):
                listener.exitMultiplicativeexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression" ):
                return visitor.visitMultiplicativeexpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 830
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 821
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 822
                        self.match(CPP14Parser.Star)
                        self.state = 823
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 824
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 825
                        self.match(CPP14Parser.Div)
                        self.state = 826
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 827
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 828
                        self.match(CPP14Parser.Mod)
                        self.state = 829
                        self.pmexpression(0)
                        pass

             
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression" ):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression" ):
                listener.exitAdditiveexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression" ):
                return visitor.visitAdditiveexpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 844
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 838
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 839
                        self.match(CPP14Parser.Plus)
                        self.state = 840
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 841
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 842
                        self.match(CPP14Parser.Minus)
                        self.state = 843
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression" ):
                listener.enterShiftexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression" ):
                listener.exitShiftexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression" ):
                return visitor.visitShiftexpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 852
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 853
                        self.match(CPP14Parser.LeftShift)
                        self.state = 854
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 855
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 856
                        self.rightShift()
                        self.state = 857
                        self.additiveexpression(0)
                        pass

             
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression" ):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression" ):
                listener.exitRelationalexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression" ):
                return visitor.visitRelationalexpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 879
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 867
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 868
                        self.match(CPP14Parser.Less)
                        self.state = 869
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 870
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 871
                        self.match(CPP14Parser.Greater)
                        self.state = 872
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 873
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 874
                        self.match(CPP14Parser.LessEqual)
                        self.state = 875
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 876
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 877
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 878
                        self.shiftexpression(0)
                        pass

             
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression" ):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression" ):
                listener.exitEqualityexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression" ):
                return visitor.visitEqualityexpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 895
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 893
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 887
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 888
                        self.match(CPP14Parser.Equal)
                        self.state = 889
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 890
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 891
                        self.match(CPP14Parser.NotEqual)
                        self.state = 892
                        self.relationalexpression(0)
                        pass

             
                self.state = 897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression" ):
                listener.enterAndexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression" ):
                listener.exitAndexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression" ):
                return visitor.visitAndexpression(self)
            else:
                return visitor.visitChildren(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 901
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 902
                    self.match(CPP14Parser.And)
                    self.state = 903
                    self.equalityexpression(0) 
                self.state = 908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression" ):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression" ):
                listener.exitExclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression" ):
                return visitor.visitExclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 912
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 913
                    self.match(CPP14Parser.Caret)
                    self.state = 914
                    self.andexpression(0) 
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression" ):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression" ):
                listener.exitInclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpression" ):
                return visitor.visitInclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 923
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 924
                    self.match(CPP14Parser.Or)
                    self.state = 925
                    self.exclusiveorexpression(0) 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression" ):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression" ):
                listener.exitLogicalandexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression" ):
                return visitor.visitLogicalandexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 934
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 935
                    self.match(CPP14Parser.AndAnd)
                    self.state = 936
                    self.inclusiveorexpression(0) 
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def OrOr(self):
            return self.getToken(CPP14Parser.OrOr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression" ):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression" ):
                listener.exitLogicalorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression" ):
                return visitor.visitLogicalorexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 945
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 946
                    self.match(CPP14Parser.OrOr)
                    self.state = 947
                    self.logicalandexpression(0) 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NonConditionalExpressionContext(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonConditionalExpression" ):
                listener.enterNonConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonConditionalExpression" ):
                listener.exitNonConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonConditionalExpression" ):
                return visitor.visitNonConditionalExpression(self)
            else:
                return visitor.visitChildren(self)


    class RealConditionalExpressionContext(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)

        def Question(self):
            return self.getToken(CPP14Parser.Question, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)
        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealConditionalExpression" ):
                listener.enterRealConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealConditionalExpression" ):
                listener.exitRealConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealConditionalExpression" ):
                return visitor.visitRealConditionalExpression(self)
            else:
                return visitor.visitChildren(self)



    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_conditionalexpression)
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.NonConditionalExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                localctx = CPP14Parser.RealConditionalExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.logicalorexpression(0)
                self.state = 955
                self.match(CPP14Parser.Question)
                self.state = 956
                self.expression(0)
                self.state = 957
                self.match(CPP14Parser.Colon)
                self.state = 958
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression" ):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression" ):
                listener.exitAssignmentexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression" ):
                return visitor.visitAssignmentexpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignmentexpression)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.logicalorexpression(0)
                self.state = 964
                self.assignmentoperator()
                self.state = 965
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator" ):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator" ):
                listener.exitAssignmentoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator" ):
                return visitor.visitAssignmentoperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentoperator)
        try:
            self.state = 981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 972
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 973
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 974
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 975
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 976
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 977
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 978
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 979
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 980
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 986
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 987
                    self.match(CPP14Parser.Comma)
                    self.state = 988
                    self.assignmentexpression() 
                self.state = 993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpression" ):
                return visitor.visitConstantexpression(self)
            else:
                return visitor.visitChildren(self)




    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 997
                    self.attributespecifierseq(0)


                self.state = 1000
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1001
                    self.attributespecifierseq(0)


                self.state = 1004
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1005
                    self.attributespecifierseq(0)


                self.state = 1008
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1009
                    self.attributespecifierseq(0)


                self.state = 1012
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1013
                    self.attributespecifierseq(0)


                self.state = 1016
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1017
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1018
                    self.attributespecifierseq(0)


                self.state = 1021
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = CPP14Parser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_label)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1024
                    self.attributespecifierseq(0)


                self.state = 1027
                self.match(CPP14Parser.Identifier)
                self.state = 1028
                self.match(CPP14Parser.Colon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1029
                    self.attributespecifierseq(0)


                self.state = 1032
                self.match(CPP14Parser.Case)
                self.state = 1033
                self.constantexpression()
                self.state = 1034
                self.match(CPP14Parser.Colon)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1036
                    self.attributespecifierseq(0)


                self.state = 1039
                self.match(CPP14Parser.Default)
                self.state = 1040
                self.match(CPP14Parser.Colon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(CPP14Parser.LabelContext,0)


        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_labeledstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement" ):
                listener.enterLabeledstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement" ):
                listener.exitLabeledstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement" ):
                return visitor.visitLabeledstatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledstatement(self):

        localctx = CPP14Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_labeledstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.label()
            self.state = 1044
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionstatement" ):
                return visitor.visitExpressionstatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1046
                self.expression(0)


            self.state = 1049
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundstatement" ):
                return visitor.visitCompoundstatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(CPP14Parser.LeftBrace)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1052
                self.statementseq(0)


            self.state = 1055
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq" ):
                listener.enterStatementseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq" ):
                listener.exitStatementseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq" ):
                return visitor.visitStatementseq(self)
            else:
                return visitor.visitChildren(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1064
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1060
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1061
                    self.statement() 
                self.state = 1066
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfStatementContext(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)


    class SwitchStatementContext(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)



    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionstatement)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.match(CPP14Parser.If)
                self.state = 1068
                self.match(CPP14Parser.LeftParen)
                self.state = 1069
                self.condition()
                self.state = 1070
                self.match(CPP14Parser.RightParen)
                self.state = 1071
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14Parser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(CPP14Parser.If)
                self.state = 1074
                self.match(CPP14Parser.LeftParen)
                self.state = 1075
                self.condition()
                self.state = 1076
                self.match(CPP14Parser.RightParen)
                self.state = 1077
                self.statement()
                self.state = 1078
                self.match(CPP14Parser.Else)
                self.state = 1079
                self.statement()
                pass

            elif la_ == 3:
                localctx = CPP14Parser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1081
                self.match(CPP14Parser.Switch)
                self.state = 1082
                self.match(CPP14Parser.LeftParen)
                self.state = 1083
                self.condition()
                self.state = 1084
                self.match(CPP14Parser.RightParen)
                self.state = 1085
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1090
                    self.attributespecifierseq(0)


                self.state = 1093
                self.declspecifierseq()
                self.state = 1094
                self.declarator()
                self.state = 1095
                self.match(CPP14Parser.Assign)
                self.state = 1096
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1098
                    self.attributespecifierseq(0)


                self.state = 1101
                self.declspecifierseq()
                self.state = 1102
                self.declarator()
                self.state = 1103
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DoStatementContext(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForRangeStatementContext(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext,0)

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)
        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForRangeStatement" ):
                listener.enterForRangeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForRangeStatement" ):
                listener.exitForRangeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForRangeStatement" ):
                return visitor.visitForRangeStatement(self)
            else:
                return visitor.visitChildren(self)


    class WhileStatementContext(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForStatementContext(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext,0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)
        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)



    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.match(CPP14Parser.While)
                self.state = 1108
                self.match(CPP14Parser.LeftParen)
                self.state = 1109
                self.condition()
                self.state = 1110
                self.match(CPP14Parser.RightParen)
                self.state = 1111
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14Parser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.match(CPP14Parser.Do)
                self.state = 1114
                self.statement()
                self.state = 1115
                self.match(CPP14Parser.While)
                self.state = 1116
                self.match(CPP14Parser.LeftParen)
                self.state = 1117
                self.condition()
                self.state = 1118
                self.match(CPP14Parser.RightParen)
                self.state = 1119
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                localctx = CPP14Parser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1121
                self.match(CPP14Parser.For)
                self.state = 1122
                self.match(CPP14Parser.LeftParen)
                self.state = 1123
                self.forinitstatement()
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1124
                    self.condition()


                self.state = 1127
                self.match(CPP14Parser.Semi)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1128
                    self.expression(0)


                self.state = 1131
                self.match(CPP14Parser.RightParen)
                self.state = 1132
                self.statement()
                pass

            elif la_ == 4:
                localctx = CPP14Parser.ForRangeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1134
                self.match(CPP14Parser.For)
                self.state = 1135
                self.match(CPP14Parser.LeftParen)
                self.state = 1136
                self.forrangedeclaration()
                self.state = 1137
                self.match(CPP14Parser.Colon)
                self.state = 1138
                self.forrangeinitializer()
                self.state = 1139
                self.match(CPP14Parser.RightParen)
                self.state = 1140
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement" ):
                listener.enterForinitstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement" ):
                listener.exitForinitstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement" ):
                return visitor.visitForinitstatement(self)
            else:
                return visitor.visitChildren(self)




    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forinitstatement)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangedeclaration" ):
                return visitor.visitForrangedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1148
                self.attributespecifierseq(0)


            self.state = 1151
            self.declspecifierseq()
            self.state = 1152
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer" ):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer" ):
                listener.exitForrangeinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitializer" ):
                return visitor.visitForrangeinitializer(self)
            else:
                return visitor.visitChildren(self)




    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forrangeinitializer)
        try:
            self.state = 1156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1155
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement" ):
                listener.enterJumpstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement" ):
                listener.exitJumpstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement" ):
                return visitor.visitJumpstatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.match(CPP14Parser.Break)
                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(CPP14Parser.Continue)
                self.state = 1161
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1162
                self.match(CPP14Parser.Return)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1163
                    self.expression(0)


                self.state = 1166
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1167
                self.match(CPP14Parser.Return)
                self.state = 1168
                self.bracedinitlist()
                self.state = 1169
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1171
                self.match(CPP14Parser.Goto)
                self.state = 1172
                self.match(CPP14Parser.Identifier)
                self.state = 1173
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationstatement" ):
                return visitor.visitDeclarationstatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationstatement(self):

        localctx = CPP14Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq" ):
                return visitor.visitDeclarationseq(self)
            else:
                return visitor.visitChildren(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1181
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1182
                    self.declaration() 
                self.state = 1187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext,0)


        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext,0)


        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext,0)


        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AttributedeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declaration)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1188
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1191
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1192
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1193
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1194
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1195
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1196
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext,0)


        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasdefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.OpaqueenumdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration" ):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration" ):
                listener.exitBlockdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration" ):
                return visitor.visitBlockdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockdeclaration)
        try:
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1202
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1203
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1204
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1205
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1206
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasdeclaration" ):
                return visitor.visitAliasdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.match(CPP14Parser.Using)
            self.state = 1210
            self.match(CPP14Parser.Identifier)
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1211
                self.attributespecifierseq(0)


            self.state = 1214
            self.match(CPP14Parser.Assign)
            self.state = 1215
            self.thetypeid()
            self.state = 1216
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration" ):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration" ):
                listener.exitSimpledeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration" ):
                return visitor.visitSimpledeclaration(self)
            else:
                return visitor.visitChildren(self)




    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1218
                    self.declspecifierseq()


                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1221
                    self.initdeclaratorlist(0)


                self.state = 1224
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.attributespecifierseq(0)
                self.state = 1227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1226
                    self.declspecifierseq()


                self.state = 1229
                self.initdeclaratorlist(0)
                self.state = 1230
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_assertdeclaration" ):
                return visitor.visitStatic_assertdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(CPP14Parser.Static_assert)
            self.state = 1235
            self.match(CPP14Parser.LeftParen)
            self.state = 1236
            self.constantexpression()
            self.state = 1237
            self.match(CPP14Parser.Comma)
            self.state = 1238
            self.match(CPP14Parser.Stringliteral)
            self.state = 1239
            self.match(CPP14Parser.RightParen)
            self.state = 1240
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptydeclaration" ):
                return visitor.visitEmptydeclaration(self)
            else:
                return visitor.visitChildren(self)




    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributedeclaration" ):
                return visitor.visitAttributedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def attributedeclaration(self):

        localctx = CPP14Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.attributespecifierseq(0)
            self.state = 1245
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypedefDeclContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefDecl" ):
                listener.enterTypedefDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefDecl" ):
                listener.exitTypedefDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefDecl" ):
                return visitor.visitTypedefDecl(self)
            else:
                return visitor.visitChildren(self)


    class FriendDeclContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFriendDecl" ):
                listener.enterFriendDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFriendDecl" ):
                listener.exitFriendDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFriendDecl" ):
                return visitor.visitFriendDecl(self)
            else:
                return visitor.visitChildren(self)


    class ConstExprDeclContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstExprDecl" ):
                listener.enterConstExprDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstExprDecl" ):
                listener.exitConstExprDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstExprDecl" ):
                return visitor.visitConstExprDecl(self)
            else:
                return visitor.visitChildren(self)


    class TypeAttrContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAttr" ):
                listener.enterTypeAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAttr" ):
                listener.exitTypeAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAttr" ):
                return visitor.visitTypeAttr(self)
            else:
                return visitor.visitChildren(self)


    class FuncAttrContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttr" ):
                listener.enterFuncAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttr" ):
                listener.exitFuncAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncAttr" ):
                return visitor.visitFuncAttr(self)
            else:
                return visitor.visitChildren(self)


    class StorageAttrContext(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.StorageclassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageAttr" ):
                listener.enterStorageAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageAttr" ):
                listener.exitStorageAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageAttr" ):
                return visitor.visitStorageAttr(self)
            else:
                return visitor.visitChildren(self)



    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declspecifier)
        try:
            self.state = 1253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Mutable, CPP14Parser.Register, CPP14Parser.Static, CPP14Parser.Thread_local]:
                localctx = CPP14Parser.StorageAttrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.storageclassspecifier()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                localctx = CPP14Parser.TypeAttrContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Explicit, CPP14Parser.Inline, CPP14Parser.Virtual]:
                localctx = CPP14Parser.FuncAttrContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1249
                self.functionspecifier()
                pass
            elif token in [CPP14Parser.Friend]:
                localctx = CPP14Parser.FriendDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1250
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                localctx = CPP14Parser.TypedefDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1251
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                localctx = CPP14Parser.ConstExprDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1252
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq" ):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq" ):
                listener.exitDeclspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq" ):
                return visitor.visitDeclspecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declspecifierseq)
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1255
                self.declspecifier()
                self.state = 1257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1256
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self.declspecifier()
                self.state = 1260
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_storageclassspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier" ):
                listener.enterStorageclassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier" ):
                listener.exitStorageclassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier" ):
                return visitor.visitStorageclassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageclassspecifier(self):

        localctx = CPP14Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_storageclassspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Extern) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Thread_local))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier" ):
                listener.enterFunctionspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier" ):
                listener.exitFunctionspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier" ):
                return visitor.visitFunctionspecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionspecifier(self):

        localctx = CPP14Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            _la = self._input.LA(1)
            if not(((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (CPP14Parser.Explicit - 27)) | (1 << (CPP14Parser.Inline - 27)) | (1 << (CPP14Parser.Virtual - 27)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefname" ):
                return visitor.visitTypedefname(self)
            else:
                return visitor.visitChildren(self)




    def typedefname(self):

        localctx = CPP14Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EnumDeclContext(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.EnumspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDecl" ):
                listener.enterEnumDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDecl" ):
                listener.exitEnumDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDecl" ):
                return visitor.visitEnumDecl(self)
            else:
                return visitor.visitChildren(self)


    class OtherDeclContext(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherDecl" ):
                listener.enterOtherDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherDecl" ):
                listener.exitOtherDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherDecl" ):
                return visitor.visitOtherDecl(self)
            else:
                return visitor.visitChildren(self)


    class ClassDeclContext(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDecl" ):
                listener.enterClassDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDecl" ):
                listener.exitClassDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDecl" ):
                return visitor.visitClassDecl(self)
            else:
                return visitor.visitChildren(self)



    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typespecifier)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.OtherDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1270
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                localctx = CPP14Parser.ClassDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1271
                self.classspecifier()
                pass

            elif la_ == 3:
                localctx = CPP14Parser.EnumDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1272
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ElaboratedtypespecifierContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier" ):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier" ):
                listener.exitTrailingtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier" ):
                return visitor.visitTrailingtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_trailingtypespecifier)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Enum, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.elaboratedtypespecifier()
                pass
            elif token in [CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1277
                self.typenamespecifier()
                pass
            elif token in [CPP14Parser.Const, CPP14Parser.Volatile]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1278
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq" ):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq" ):
                listener.exitTypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq" ):
                return visitor.visitTypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typespecifierseq)
        try:
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.typespecifier()
                self.state = 1283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1282
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.typespecifier()
                self.state = 1286
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq" ):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq" ):
                listener.exitTrailingtypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq" ):
                return visitor.visitTrailingtypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self.trailingtypespecifier()
                self.state = 1292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1291
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.trailingtypespecifier()
                self.state = 1295
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier" ):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier" ):
                listener.exitSimpletypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier" ):
                return visitor.visitSimpletypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpletypespecifier)
        try:
            self.state = 1322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1299
                    self.nestednamespecifier(0)


                self.state = 1302
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self.nestednamespecifier(0)
                self.state = 1304
                self.match(CPP14Parser.Template)
                self.state = 1305
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1308
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1309
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1310
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1311
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1312
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1313
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1314
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1315
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1316
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1317
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1318
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1319
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1320
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1321
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def enumname(self):
            return self.getTypedRuleContext(CPP14Parser.EnumnameContext,0)


        def typedefname(self):
            return self.getTypedRuleContext(CPP14Parser.TypedefnameContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename" ):
                listener.enterThetypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename" ):
                listener.exitThetypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename" ):
                return visitor.visitThetypename(self)
            else:
                return visitor.visitChildren(self)




    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_thetypename)
        try:
            self.state = 1328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1324
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.enumname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1326
                self.typedefname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1327
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier" ):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier" ):
                listener.exitDecltypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier" ):
                return visitor.visitDecltypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_decltypespecifier)
        try:
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                self.match(CPP14Parser.Decltype)
                self.state = 1331
                self.match(CPP14Parser.LeftParen)
                self.state = 1332
                self.expression(0)
                self.state = 1333
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(CPP14Parser.Decltype)
                self.state = 1336
                self.match(CPP14Parser.LeftParen)
                self.state = 1337
                self.match(CPP14Parser.Auto)
                self.state = 1338
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elaboratedtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier" ):
                listener.enterElaboratedtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier" ):
                listener.exitElaboratedtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier" ):
                return visitor.visitElaboratedtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def elaboratedtypespecifier(self):

        localctx = CPP14Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self.classkey()
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1342
                    self.attributespecifierseq(0)


                self.state = 1346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.nestednamespecifier(0)


                self.state = 1348
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.classkey()
                self.state = 1351
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.classkey()
                self.state = 1354
                self.nestednamespecifier(0)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 1355
                    self.match(CPP14Parser.Template)


                self.state = 1358
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1360
                self.match(CPP14Parser.Enum)
                self.state = 1362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1361
                    self.nestednamespecifier(0)


                self.state = 1364
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumname" ):
                return visitor.visitEnumname(self)
            else:
                return visitor.visitChildren(self)




    def enumname(self):

        localctx = CPP14Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier" ):
                listener.enterEnumspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier" ):
                listener.exitEnumspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier" ):
                return visitor.visitEnumspecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumspecifier(self):

        localctx = CPP14Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.enumhead()
                self.state = 1370
                self.match(CPP14Parser.LeftBrace)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1371
                    self.enumeratorlist(0)


                self.state = 1374
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.enumhead()
                self.state = 1377
                self.match(CPP14Parser.LeftBrace)
                self.state = 1378
                self.enumeratorlist(0)
                self.state = 1379
                self.match(CPP14Parser.Comma)
                self.state = 1380
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead" ):
                listener.enterEnumhead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead" ):
                listener.exitEnumhead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead" ):
                return visitor.visitEnumhead(self)
            else:
                return visitor.visitChildren(self)




    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1384
                self.enumkey()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1385
                    self.attributespecifierseq(0)


                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1388
                    self.match(CPP14Parser.Identifier)


                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1391
                    self.enumbase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.enumkey()
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1395
                    self.attributespecifierseq(0)


                self.state = 1398
                self.nestednamespecifier(0)
                self.state = 1399
                self.match(CPP14Parser.Identifier)
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1400
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueenumdeclaration" ):
                return visitor.visitOpaqueenumdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.enumkey()
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1406
                self.attributespecifierseq(0)


            self.state = 1409
            self.match(CPP14Parser.Identifier)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1410
                self.enumbase()


            self.state = 1413
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey" ):
                return visitor.visitEnumkey(self)
            else:
                return visitor.visitChildren(self)




    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumkey)
        try:
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1415
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(CPP14Parser.Enum)
                self.state = 1417
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1418
                self.match(CPP14Parser.Enum)
                self.state = 1419
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbase" ):
                return visitor.visitEnumbase(self)
            else:
                return visitor.visitChildren(self)




    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(CPP14Parser.Colon)
            self.state = 1423
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist" ):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist" ):
                listener.exitEnumeratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist" ):
                return visitor.visitEnumeratorlist(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1428
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1429
                    self.match(CPP14Parser.Comma)
                    self.state = 1430
                    self.enumeratordefinition() 
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition" ):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition" ):
                listener.exitEnumeratordefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition" ):
                return visitor.visitEnumeratordefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratordefinition)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.enumerator()
                self.state = 1438
                self.match(CPP14Parser.Assign)
                self.state = 1439
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename" ):
                listener.enterNamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename" ):
                listener.exitNamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename" ):
                return visitor.visitNamespacename(self)
            else:
                return visitor.visitChildren(self)




    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namespacename)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacename" ):
                return visitor.visitOriginalnamespacename(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext,0)


        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.UnnamednamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition" ):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition" ):
                listener.exitNamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition" ):
                return visitor.visitNamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespacedefinition)
        try:
            self.state = 1453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1451
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1452
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacedefinitionContext,0)


        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.ExtensionnamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition" ):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition" ):
                listener.exitNamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition" ):
                return visitor.visitNamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namednamespacedefinition)
        try:
            self.state = 1457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacedefinition" ):
                return visitor.visitOriginalnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacedefinition(self):

        localctx = CPP14Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1459
                self.match(CPP14Parser.Inline)


            self.state = 1462
            self.match(CPP14Parser.Namespace)
            self.state = 1463
            self.match(CPP14Parser.Identifier)
            self.state = 1464
            self.match(CPP14Parser.LeftBrace)
            self.state = 1465
            self.namespacebody()
            self.state = 1466
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionnamespacedefinition" ):
                return visitor.visitExtensionnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1468
                self.match(CPP14Parser.Inline)


            self.state = 1471
            self.match(CPP14Parser.Namespace)
            self.state = 1472
            self.originalnamespacename()
            self.state = 1473
            self.match(CPP14Parser.LeftBrace)
            self.state = 1474
            self.namespacebody()
            self.state = 1475
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamednamespacedefinition" ):
                return visitor.visitUnnamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1477
                self.match(CPP14Parser.Inline)


            self.state = 1480
            self.match(CPP14Parser.Namespace)
            self.state = 1481
            self.match(CPP14Parser.LeftBrace)
            self.state = 1482
            self.namespacebody()
            self.state = 1483
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacebody" ):
                return visitor.visitNamespacebody(self)
            else:
                return visitor.visitChildren(self)




    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1485
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealias" ):
                return visitor.visitNamespacealias(self)
            else:
                return visitor.visitChildren(self)




    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealiasdefinition" ):
                return visitor.visitNamespacealiasdefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacealiasdefinition(self):

        localctx = CPP14Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(CPP14Parser.Namespace)
            self.state = 1491
            self.match(CPP14Parser.Identifier)
            self.state = 1492
            self.match(CPP14Parser.Assign)
            self.state = 1493
            self.qualifiednamespacespecifier()
            self.state = 1494
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiednamespacespecifier" ):
                return visitor.visitQualifiednamespacespecifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1496
                self.nestednamespecifier(0)


            self.state = 1499
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration" ):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration" ):
                listener.exitUsingdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration" ):
                return visitor.visitUsingdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1501
                self.match(CPP14Parser.Using)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Typename:
                    self.state = 1502
                    self.match(CPP14Parser.Typename)


                self.state = 1505
                self.nestednamespecifier(0)
                self.state = 1506
                self.unqualifiedid()
                self.state = 1507
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.match(CPP14Parser.Using)
                self.state = 1510
                self.match(CPP14Parser.Doublecolon)
                self.state = 1511
                self.unqualifiedid()
                self.state = 1512
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdirective" ):
                return visitor.visitUsingdirective(self)
            else:
                return visitor.visitChildren(self)




    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1516
                self.attributespecifierseq(0)


            self.state = 1519
            self.match(CPP14Parser.Using)
            self.state = 1520
            self.match(CPP14Parser.Namespace)
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1521
                self.nestednamespecifier(0)


            self.state = 1524
            self.namespacename()
            self.state = 1525
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmdefinition" ):
                return visitor.visitAsmdefinition(self)
            else:
                return visitor.visitChildren(self)




    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(CPP14Parser.Asm)
            self.state = 1528
            self.match(CPP14Parser.LeftParen)
            self.state = 1529
            self.match(CPP14Parser.Stringliteral)
            self.state = 1530
            self.match(CPP14Parser.RightParen)
            self.state = 1531
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification" ):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification" ):
                listener.exitLinkagespecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification" ):
                return visitor.visitLinkagespecification(self)
            else:
                return visitor.visitChildren(self)




    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                self.match(CPP14Parser.Extern)
                self.state = 1534
                self.match(CPP14Parser.Stringliteral)
                self.state = 1535
                self.match(CPP14Parser.LeftBrace)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1536
                    self.declarationseq(0)


                self.state = 1539
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.match(CPP14Parser.Extern)
                self.state = 1541
                self.match(CPP14Parser.Stringliteral)
                self.state = 1542
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq" ):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq" ):
                listener.exitAttributespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq" ):
                return visitor.visitAttributespecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1548
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1549
                    self.attributespecifier() 
                self.state = 1554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier" ):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier" ):
                listener.exitAttributespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier" ):
                return visitor.visitAttributespecifier(self)
            else:
                return visitor.visitChildren(self)




    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributespecifier)
        try:
            self.state = 1562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1555
                self.match(CPP14Parser.LeftBracket)
                self.state = 1556
                self.match(CPP14Parser.LeftBracket)
                self.state = 1557
                self.attributelist(0)
                self.state = 1558
                self.match(CPP14Parser.RightBracket)
                self.state = 1559
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier" ):
                return visitor.visitAlignmentspecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.match(CPP14Parser.Alignas)
                self.state = 1565
                self.match(CPP14Parser.LeftParen)
                self.state = 1566
                self.thetypeid()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1567
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1570
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1572
                self.match(CPP14Parser.Alignas)
                self.state = 1573
                self.match(CPP14Parser.LeftParen)
                self.state = 1574
                self.constantexpression()
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1575
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1578
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist" ):
                listener.enterAttributelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist" ):
                listener.exitAttributelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist" ):
                return visitor.visitAttributelist(self)
            else:
                return visitor.visitChildren(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1583
                    self.attribute()


                pass

            elif la_ == 2:
                self.state = 1586
                self.attribute()
                self.state = 1587
                self.match(CPP14Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1603
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1601
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1591
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1592
                        self.match(CPP14Parser.Comma)
                        self.state = 1594
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                        if la_ == 1:
                            self.state = 1593
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1596
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1597
                        self.match(CPP14Parser.Comma)
                        self.state = 1598
                        self.attribute()
                        self.state = 1599
                        self.match(CPP14Parser.Ellipsis)
                        pass

             
                self.state = 1605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.attributetoken()
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1607
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken" ):
                listener.enterAttributetoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken" ):
                listener.exitAttributetoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken" ):
                return visitor.visitAttributetoken(self)
            else:
                return visitor.visitChildren(self)




    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributetoken)
        try:
            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1610
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributescopedtoken" ):
                return visitor.visitAttributescopedtoken(self)
            else:
                return visitor.visitChildren(self)




    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.attributenamespace()
            self.state = 1615
            self.match(CPP14Parser.Doublecolon)
            self.state = 1616
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributenamespace" ):
                return visitor.visitAttributenamespace(self)
            else:
                return visitor.visitChildren(self)




    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeargumentclause" ):
                return visitor.visitAttributeargumentclause(self)
            else:
                return visitor.visitChildren(self)




    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(CPP14Parser.LeftParen)
            self.state = 1621
            self.balancedtokenseq(0)
            self.state = 1622
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext,0)


        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq" ):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq" ):
                listener.exitBalancedtokenseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq" ):
                return visitor.visitBalancedtokenseq(self)
            else:
                return visitor.visitChildren(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1625
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1628
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1629
                    self.balancedtoken() 
                self.state = 1634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken" ):
                return visitor.visitBalancedtoken(self)
            else:
                return visitor.visitChildren(self)




    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_balancedtoken)
        try:
            self.state = 1647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1635
                self.match(CPP14Parser.LeftParen)
                self.state = 1636
                self.balancedtokenseq(0)
                self.state = 1637
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.match(CPP14Parser.LeftBracket)
                self.state = 1640
                self.balancedtokenseq(0)
                self.state = 1641
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1643
                self.match(CPP14Parser.LeftBrace)
                self.state = 1644
                self.balancedtokenseq(0)
                self.state = 1645
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist" ):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist" ):
                listener.exitInitdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist" ):
                return visitor.visitInitdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1652
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1653
                    self.match(CPP14Parser.Comma)
                    self.state = 1654
                    self.initdeclarator() 
                self.state = 1659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclarator" ):
                return visitor.visitInitdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.declarator()
            self.state = 1662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1661
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_declarator)
        try:
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1664
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.noptrdeclarator(0)
                self.state = 1666
                self.parametersandqualifiers()
                self.state = 1667
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PtrDeclContext(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrDecl" ):
                listener.enterPtrDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrDecl" ):
                listener.exitPtrDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrDecl" ):
                return visitor.visitPtrDecl(self)
            else:
                return visitor.visitChildren(self)


    class NonPtrDeclContext(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonPtrDecl" ):
                listener.enterNonPtrDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonPtrDecl" ):
                listener.exitNonPtrDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonPtrDecl" ):
                return visitor.visitNonPtrDecl(self)
            else:
                return visitor.visitChildren(self)



    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ptrdeclarator)
        try:
            self.state = 1675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.NonPtrDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1671
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                localctx = CPP14Parser.PtrDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1672
                self.ptroperator()
                self.state = 1673
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NoptrIgnoreContext(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)
        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrIgnore" ):
                listener.enterNoptrIgnore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrIgnore" ):
                listener.exitNoptrIgnore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrIgnore" ):
                return visitor.visitNoptrIgnore(self)
            else:
                return visitor.visitChildren(self)


    class NormalVarDeclContext(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalVarDecl" ):
                listener.enterNormalVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalVarDecl" ):
                listener.exitNormalVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalVarDecl" ):
                return visitor.visitNormalVarDecl(self)
            else:
                return visitor.visitChildren(self)


    class ArrayDeclContext(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDecl" ):
                listener.enterArrayDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDecl" ):
                listener.exitArrayDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDecl" ):
                return visitor.visitArrayDecl(self)
            else:
                return visitor.visitChildren(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                localctx = CPP14Parser.NormalVarDeclContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1678
                self.declaratorid()
                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1679
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.LeftParen]:
                localctx = CPP14Parser.NoptrIgnoreContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1682
                self.match(CPP14Parser.LeftParen)
                self.state = 1683
                self.ptrdeclarator()
                self.state = 1684
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1699
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrIgnoreContext(self, CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1688
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1689
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ArrayDeclContext(self, CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1690
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1691
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1692
                            self.constantexpression()


                        self.state = 1695
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1697
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                        if la_ == 1:
                            self.state = 1696
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersandqualifiers" ):
                return visitor.visitParametersandqualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(CPP14Parser.LeftParen)
            self.state = 1705
            self.parameterdeclarationclause()
            self.state = 1706
            self.match(CPP14Parser.RightParen)
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.cvqualifierseq()


            self.state = 1711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1710
                self.refqualifier()


            self.state = 1714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1713
                self.exceptionspecification()


            self.state = 1717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1716
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingreturntype" ):
                return visitor.visitTrailingreturntype(self)
            else:
                return visitor.visitChildren(self)




    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(CPP14Parser.Arrow)
            self.state = 1720
            self.trailingtypespecifierseq()
            self.state = 1722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1721
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator" ):
                listener.enterPtroperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator" ):
                listener.exitPtroperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator" ):
                return visitor.visitPtroperator(self)
            else:
                return visitor.visitChildren(self)




    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptroperator)
        try:
            self.state = 1747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1724
                self.match(CPP14Parser.Star)
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.attributespecifierseq(0)


                self.state = 1729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1728
                    self.cvqualifierseq()


                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1731
                self.match(CPP14Parser.And)
                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1735
                self.match(CPP14Parser.AndAnd)
                self.state = 1737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1736
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1739
                self.nestednamespecifier(0)
                self.state = 1740
                self.match(CPP14Parser.Star)
                self.state = 1742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.attributespecifierseq(0)


                self.state = 1745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.cvqualifier()
            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1750
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier" ):
                listener.enterCvqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier" ):
                listener.exitCvqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier" ):
                return visitor.visitCvqualifier(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cvqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Const or _la==CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier" ):
                return visitor.visitRefqualifier(self)
            else:
                return visitor.visitChildren(self)




    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1757
                self.match(CPP14Parser.Ellipsis)


            self.state = 1760
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypeid" ):
                return visitor.visitThetypeid(self)
            else:
                return visitor.visitChildren(self)




    def thetypeid(self):

        localctx = CPP14Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.typespecifierseq()
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1763
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator" ):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator" ):
                listener.exitAbstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator" ):
                return visitor.visitAbstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractdeclarator)
        try:
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.noptrabstractdeclarator(0)


                self.state = 1770
                self.parametersandqualifiers()
                self.state = 1771
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1773
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator" ):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator" ):
                listener.exitPtrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator" ):
                return visitor.visitPtrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1776
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1777
                self.ptroperator()
                self.state = 1779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1778
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator" ):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator" ):
                listener.exitNoptrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator" ):
                return visitor.visitNoptrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1784
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1785
                self.match(CPP14Parser.LeftBracket)
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1786
                    self.constantexpression()


                self.state = 1789
                self.match(CPP14Parser.RightBracket)
                self.state = 1791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1790
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                self.state = 1793
                self.match(CPP14Parser.LeftParen)
                self.state = 1794
                self.ptrabstractdeclarator()
                self.state = 1795
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1810
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1799
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1800
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1801
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1802
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1803
                            self.constantexpression()


                        self.state = 1806
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1808
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                        if la_ == 1:
                            self.state = 1807
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator" ):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator" ):
                listener.exitAbstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator" ):
                return visitor.visitAbstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1815
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1816
                self.ptroperator()
                self.state = 1817
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator" ):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator" ):
                listener.exitNoptrabstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator" ):
                return visitor.visitNoptrabstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1835
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1824
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1825
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1827
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1828
                            self.constantexpression()


                        self.state = 1831
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1833
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                        if la_ == 1:
                            self.state = 1832
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause" ):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause" ):
                listener.exitParameterdeclarationclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause" ):
                return visitor.visitParameterdeclarationclause(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1840
                    self.parameterdeclarationlist(0)


                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1843
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.parameterdeclarationlist(0)
                self.state = 1847
                self.match(CPP14Parser.Comma)
                self.state = 1848
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist" ):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist" ):
                listener.exitParameterdeclarationlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist" ):
                return visitor.visitParameterdeclarationlist(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1855
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1856
                    self.match(CPP14Parser.Comma)
                    self.state = 1857
                    self.parameterdeclaration() 
                self.state = 1862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration" ):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration" ):
                listener.exitParameterdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration" ):
                return visitor.visitParameterdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1863
                    self.attributespecifierseq(0)


                self.state = 1866
                self.declspecifierseq()
                self.state = 1867
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1869
                    self.attributespecifierseq(0)


                self.state = 1872
                self.declspecifierseq()
                self.state = 1873
                self.declarator()
                self.state = 1874
                self.match(CPP14Parser.Assign)
                self.state = 1875
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1877
                    self.attributespecifierseq(0)


                self.state = 1880
                self.declspecifierseq()
                self.state = 1882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1881
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1884
                    self.attributespecifierseq(0)


                self.state = 1887
                self.declspecifierseq()
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1888
                    self.abstractdeclarator()


                self.state = 1891
                self.match(CPP14Parser.Assign)
                self.state = 1892
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1896
                self.attributespecifierseq(0)


            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1899
                self.declspecifierseq()


            self.state = 1902
            self.declarator()
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Final or _la==CPP14Parser.Override:
                self.state = 1903
                self.virtspecifierseq(0)


            self.state = 1906
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody" ):
                listener.enterFunctionbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody" ):
                listener.exitFunctionbody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody" ):
                return visitor.visitFunctionbody(self)
            else:
                return visitor.visitChildren(self)




    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1908
                    self.ctorinitializer()


                self.state = 1911
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1913
                self.match(CPP14Parser.Assign)
                self.state = 1914
                self.match(CPP14Parser.Default)
                self.state = 1915
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1916
                self.match(CPP14Parser.Assign)
                self.state = 1917
                self.match(CPP14Parser.Delete)
                self.state = 1918
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitDeclWithAssignListContext(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithAssignList" ):
                listener.enterInitDeclWithAssignList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithAssignList" ):
                listener.exitInitDeclWithAssignList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithAssignList" ):
                return visitor.visitInitDeclWithAssignList(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclWithCallContext(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithCall" ):
                listener.enterInitDeclWithCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithCall" ):
                listener.exitInitDeclWithCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithCall" ):
                return visitor.visitInitDeclWithCall(self)
            else:
                return visitor.visitChildren(self)



    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_initializer)
        try:
            self.state = 1926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                localctx = CPP14Parser.InitDeclWithAssignListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1921
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                localctx = CPP14Parser.InitDeclWithCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.match(CPP14Parser.LeftParen)
                self.state = 1923
                self.expressionlist()
                self.state = 1924
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitDeclWithAssignContext(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithAssign" ):
                listener.enterInitDeclWithAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithAssign" ):
                listener.exitInitDeclWithAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithAssign" ):
                return visitor.visitInitDeclWithAssign(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclWithListContext(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithList" ):
                listener.enterInitDeclWithList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithList" ):
                listener.exitInitDeclWithList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithList" ):
                return visitor.visitInitDeclWithList(self)
            else:
                return visitor.visitChildren(self)



    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_braceorequalinitializer)
        try:
            self.state = 1931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                localctx = CPP14Parser.InitDeclWithAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1928
                self.match(CPP14Parser.Assign)
                self.state = 1929
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                localctx = CPP14Parser.InitDeclWithListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrayAssignContext(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAssign" ):
                listener.enterArrayAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAssign" ):
                listener.exitArrayAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayAssign" ):
                return visitor.visitArrayAssign(self)
            else:
                return visitor.visitChildren(self)


    class NormalAssignContext(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalAssign" ):
                listener.enterNormalAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalAssign" ):
                listener.exitNormalAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalAssign" ):
                return visitor.visitNormalAssign(self)
            else:
                return visitor.visitChildren(self)



    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_initializerclause)
        try:
            self.state = 1935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                localctx = CPP14Parser.NormalAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1933
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                localctx = CPP14Parser.ArrayAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1934
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist" ):
                listener.enterInitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist" ):
                listener.exitInitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist" ):
                return visitor.visitInitializerlist(self)
            else:
                return visitor.visitChildren(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.initializerclause()
            self.state = 1940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1939
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1942
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1943
                    self.match(CPP14Parser.Comma)
                    self.state = 1944
                    self.initializerclause()
                    self.state = 1946
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                    if la_ == 1:
                        self.state = 1945
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 1952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist" ):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist" ):
                listener.exitBracedinitlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist" ):
                return visitor.visitBracedinitlist(self)
            else:
                return visitor.visitChildren(self)




    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1953
                self.match(CPP14Parser.LeftBrace)
                self.state = 1954
                self.initializerlist(0)
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1955
                    self.match(CPP14Parser.Comma)


                self.state = 1958
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.match(CPP14Parser.LeftBrace)
                self.state = 1961
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname" ):
                return visitor.visitClassname(self)
            else:
                return visitor.visitChildren(self)




    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classname)
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1964
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassspecifier" ):
                return visitor.visitClassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.classhead()
            self.state = 1969
            self.match(CPP14Parser.LeftBrace)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1970
                self.memberspecification()


            self.state = 1973
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext,0)


        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead" ):
                listener.enterClasshead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead" ):
                listener.exitClasshead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead" ):
                return visitor.visitClasshead(self)
            else:
                return visitor.visitChildren(self)




    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975
                self.classkey()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1976
                    self.attributespecifierseq(0)


                self.state = 1979
                self.classheadname()
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Final:
                    self.state = 1980
                    self.classvirtspecifier()


                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1983
                    self.baseclause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1986
                self.classkey()
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1987
                    self.attributespecifierseq(0)


                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1990
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassheadname" ):
                return visitor.visitClassheadname(self)
            else:
                return visitor.visitChildren(self)




    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1995
                self.nestednamespecifier(0)


            self.state = 1998
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassvirtspecifier" ):
                return visitor.visitClassvirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey" ):
                listener.enterClasskey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey" ):
                listener.exitClasskey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey" ):
                return visitor.visitClasskey(self)
            else:
                return visitor.visitChildren(self)




    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_classkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            _la = self._input.LA(1)
            if not(((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (1 << (CPP14Parser.Union - 14)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification" ):
                listener.enterMemberspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification" ):
                listener.exitMemberspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification" ):
                return visitor.visitMemberspecification(self)
            else:
                return visitor.visitChildren(self)




    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2004
                self.memberdeclaration()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2005
                    self.memberspecification()


                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2008
                self.accessspecifier()
                self.state = 2009
                self.match(CPP14Parser.Colon)
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2010
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberStaticAssertContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberStaticAssert" ):
                listener.enterMemberStaticAssert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberStaticAssert" ):
                listener.exitMemberStaticAssert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberStaticAssert" ):
                return visitor.visitMemberStaticAssert(self)
            else:
                return visitor.visitChildren(self)


    class MemberTemplateDeclContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberTemplateDecl" ):
                listener.enterMemberTemplateDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberTemplateDecl" ):
                listener.exitMemberTemplateDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberTemplateDecl" ):
                return visitor.visitMemberTemplateDecl(self)
            else:
                return visitor.visitChildren(self)


    class MemberUsingContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberUsing" ):
                listener.enterMemberUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberUsing" ):
                listener.exitMemberUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberUsing" ):
                return visitor.visitMemberUsing(self)
            else:
                return visitor.visitChildren(self)


    class MemberEmptyContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberEmpty" ):
                listener.enterMemberEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberEmpty" ):
                listener.exitMemberEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberEmpty" ):
                return visitor.visitMemberEmpty(self)
            else:
                return visitor.visitChildren(self)


    class MemberVarDeclContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberVarDecl" ):
                listener.enterMemberVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberVarDecl" ):
                listener.exitMemberVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberVarDecl" ):
                return visitor.visitMemberVarDecl(self)
            else:
                return visitor.visitChildren(self)


    class MemberFuncDeclContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberFuncDecl" ):
                listener.enterMemberFuncDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberFuncDecl" ):
                listener.exitMemberFuncDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberFuncDecl" ):
                return visitor.visitMemberFuncDecl(self)
            else:
                return visitor.visitChildren(self)


    class MemberAliasDeclContext(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAliasDecl" ):
                listener.enterMemberAliasDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAliasDecl" ):
                listener.exitMemberAliasDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAliasDecl" ):
                return visitor.visitMemberAliasDecl(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                localctx = CPP14Parser.MemberVarDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2015
                    self.attributespecifierseq(0)


                self.state = 2019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2018
                    self.declspecifierseq()


                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2021
                    self.memberdeclaratorlist(0)


                self.state = 2024
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14Parser.MemberFuncDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2025
                self.functiondefinition()
                pass

            elif la_ == 3:
                localctx = CPP14Parser.MemberUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2026
                self.usingdeclaration()
                pass

            elif la_ == 4:
                localctx = CPP14Parser.MemberStaticAssertContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2027
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                localctx = CPP14Parser.MemberTemplateDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2028
                self.templatedeclaration()
                pass

            elif la_ == 6:
                localctx = CPP14Parser.MemberAliasDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2029
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                localctx = CPP14Parser.MemberEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2030
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlist" ):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlist" ):
                listener.exitMemberdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlist" ):
                return visitor.visitMemberdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2041
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2036
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2037
                    self.match(CPP14Parser.Comma)
                    self.state = 2038
                    self.memberdeclarator() 
                self.state = 2043
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext,0)


        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator" ):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator" ):
                listener.exitMemberdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator" ):
                return visitor.visitMemberdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.declarator()
                self.state = 2046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 2045
                    self.virtspecifierseq(0)


                self.state = 2049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 2048
                    self.purespecifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self.declarator()
                self.state = 2053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2052
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2055
                    self.match(CPP14Parser.Identifier)


                self.state = 2059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2058
                    self.attributespecifierseq(0)


                self.state = 2061
                self.match(CPP14Parser.Colon)
                self.state = 2062
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq" ):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq" ):
                listener.exitVirtspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq" ):
                return visitor.visitVirtspecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2068
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2069
                    self.virtspecifier() 
                self.state = 2074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier" ):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier" ):
                listener.exitVirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier" ):
                return visitor.visitVirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_virtspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Final or _la==CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurespecifier" ):
                return visitor.visitPurespecifier(self)
            else:
                return visitor.visitChildren(self)




    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.match(CPP14Parser.Assign)
            self.state = 2078
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0):
                exit(-1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseclause" ):
                return visitor.visitBaseclause(self)
            else:
                return visitor.visitChildren(self)




    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.match(CPP14Parser.Colon)
            self.state = 2082
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist" ):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist" ):
                listener.exitBasespecifierlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist" ):
                return visitor.visitBasespecifierlist(self)
            else:
                return visitor.visitChildren(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.basespecifier()
            self.state = 2087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 2086
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2097
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2089
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2090
                    self.match(CPP14Parser.Comma)
                    self.state = 2091
                    self.basespecifier()
                    self.state = 2093
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                    if la_ == 1:
                        self.state = 2092
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier" ):
                listener.enterBasespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier" ):
                listener.exitBasespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier" ):
                return visitor.visitBasespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2100
                    self.attributespecifierseq(0)


                self.state = 2103
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2104
                    self.attributespecifierseq(0)


                self.state = 2107
                self.match(CPP14Parser.Virtual)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2108
                    self.accessspecifier()


                self.state = 2111
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2112
                    self.attributespecifierseq(0)


                self.state = 2115
                self.accessspecifier()
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Virtual:
                    self.state = 2116
                    self.match(CPP14Parser.Virtual)


                self.state = 2119
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype" ):
                listener.enterClassordecltype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype" ):
                listener.exitClassordecltype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype" ):
                return visitor.visitClassordecltype(self)
            else:
                return visitor.visitChildren(self)




    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_classordecltype)
        try:
            self.state = 2128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 2123
                    self.nestednamespecifier(0)


                self.state = 2126
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2127
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasetypespecifier" ):
                return visitor.visitBasetypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier" ):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier" ):
                listener.exitAccessspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier" ):
                return visitor.visitAccessspecifier(self)
            else:
                return visitor.visitChildren(self)




    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_accessspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionfunctionid" ):
                return visitor.visitConversionfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.match(CPP14Parser.Operator)
            self.state = 2135
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiontypeid" ):
                return visitor.visitConversiontypeid(self)
            else:
                return visitor.visitChildren(self)




    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2137
            self.typespecifierseq()
            self.state = 2139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2138
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiondeclarator" ):
                return visitor.visitConversiondeclarator(self)
            else:
                return visitor.visitChildren(self)




    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.ptroperator()
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2142
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtorinitializer" ):
                return visitor.visitCtorinitializer(self)
            else:
                return visitor.visitChildren(self)




    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.match(CPP14Parser.Colon)
            self.state = 2146
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist" ):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist" ):
                listener.exitMeminitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist" ):
                return visitor.visitMeminitializerlist(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2148
                self.meminitializer()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2149
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.meminitializer()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2153
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2156
                self.match(CPP14Parser.Comma)
                self.state = 2157
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer" ):
                listener.enterMeminitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer" ):
                listener.exitMeminitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer" ):
                return visitor.visitMeminitializer(self)
            else:
                return visitor.visitChildren(self)




    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2161
                self.meminitializerid()
                self.state = 2162
                self.match(CPP14Parser.LeftParen)
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2163
                    self.expressionlist()


                self.state = 2166
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self.meminitializerid()
                self.state = 2169
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid" ):
                return visitor.visitMeminitializerid(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_meminitializerid)
        try:
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2173
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorfunctionid" ):
                return visitor.visitOperatorfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(CPP14Parser.Operator)
            self.state = 2178
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid" ):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid" ):
                listener.exitLiteraloperatorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid" ):
                return visitor.visitLiteraloperatorid(self)
            else:
                return visitor.visitChildren(self)




    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_literaloperatorid)
        try:
            self.state = 2185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2180
                self.match(CPP14Parser.Operator)
                self.state = 2181
                self.match(CPP14Parser.Stringliteral)
                self.state = 2182
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.match(CPP14Parser.Operator)
                self.state = 2184
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatedeclaration" ):
                return visitor.visitTemplatedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            self.match(CPP14Parser.Template)
            self.state = 2188
            self.match(CPP14Parser.Less)
            self.state = 2189
            self.templateparameterlist(0)
            self.state = 2190
            self.match(CPP14Parser.Greater)
            self.state = 2191
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext,0)


        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist" ):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist" ):
                listener.exitTemplateparameterlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist" ):
                return visitor.visitTemplateparameterlist(self)
            else:
                return visitor.visitChildren(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2201
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2196
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2197
                    self.match(CPP14Parser.Comma)
                    self.state = 2198
                    self.templateparameter() 
                self.state = 2203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeparameterContext,0)


        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter" ):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter" ):
                listener.exitTemplateparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter" ):
                return visitor.visitTemplateparameter(self)
            else:
                return visitor.visitChildren(self)




    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateparameter)
        try:
            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2204
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter" ):
                listener.enterTypeparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter" ):
                listener.exitTypeparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter" ):
                return visitor.visitTypeparameter(self)
            else:
                return visitor.visitChildren(self)




    def typeparameter(self):

        localctx = CPP14Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2208
                self.match(CPP14Parser.Class)
                self.state = 2210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2209
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2212
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2215
                self.match(CPP14Parser.Class)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2216
                    self.match(CPP14Parser.Identifier)


                self.state = 2219
                self.match(CPP14Parser.Assign)
                self.state = 2220
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2221
                self.match(CPP14Parser.Typename)
                self.state = 2223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2222
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2225
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2228
                self.match(CPP14Parser.Typename)
                self.state = 2230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2229
                    self.match(CPP14Parser.Identifier)


                self.state = 2232
                self.match(CPP14Parser.Assign)
                self.state = 2233
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2234
                self.match(CPP14Parser.Template)
                self.state = 2235
                self.match(CPP14Parser.Less)
                self.state = 2236
                self.templateparameterlist(0)
                self.state = 2237
                self.match(CPP14Parser.Greater)
                self.state = 2238
                self.match(CPP14Parser.Class)
                self.state = 2240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2239
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2242
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2245
                self.match(CPP14Parser.Template)
                self.state = 2246
                self.match(CPP14Parser.Less)
                self.state = 2247
                self.templateparameterlist(0)
                self.state = 2248
                self.match(CPP14Parser.Greater)
                self.state = 2249
                self.match(CPP14Parser.Class)
                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2250
                    self.match(CPP14Parser.Identifier)


                self.state = 2253
                self.match(CPP14Parser.Assign)
                self.state = 2254
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletemplateid" ):
                return visitor.visitSimpletemplateid(self)
            else:
                return visitor.visitChildren(self)




    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            self.templatename()
            self.state = 2259
            self.match(CPP14Parser.Less)
            self.state = 2261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2260
                self.templateargumentlist(0)


            self.state = 2263
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid" ):
                listener.enterTemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid" ):
                listener.exitTemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid" ):
                return visitor.visitTemplateid(self)
            else:
                return visitor.visitChildren(self)




    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2266
                self.operatorfunctionid()
                self.state = 2267
                self.match(CPP14Parser.Less)
                self.state = 2269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2268
                    self.templateargumentlist(0)


                self.state = 2271
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2273
                self.literaloperatorid()
                self.state = 2274
                self.match(CPP14Parser.Less)
                self.state = 2276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2275
                    self.templateargumentlist(0)


                self.state = 2278
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatename" ):
                return visitor.visitTemplatename(self)
            else:
                return visitor.visitChildren(self)




    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist" ):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist" ):
                listener.exitTemplateargumentlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist" ):
                return visitor.visitTemplateargumentlist(self)
            else:
                return visitor.visitChildren(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.templateargument()
            self.state = 2287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2286
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2289
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2290
                    self.match(CPP14Parser.Comma)
                    self.state = 2291
                    self.templateargument()
                    self.state = 2293
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                    if la_ == 1:
                        self.state = 2292
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument" ):
                listener.enterTemplateargument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument" ):
                listener.exitTemplateargument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument" ):
                return visitor.visitTemplateargument(self)
            else:
                return visitor.visitChildren(self)




    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_templateargument)
        try:
            self.state = 2303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2300
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2302
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier" ):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier" ):
                listener.exitTypenamespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier" ):
                return visitor.visitTypenamespecifier(self)
            else:
                return visitor.visitChildren(self)




    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2305
                self.match(CPP14Parser.Typename)
                self.state = 2306
                self.nestednamespecifier(0)
                self.state = 2307
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2309
                self.match(CPP14Parser.Typename)
                self.state = 2310
                self.nestednamespecifier(0)
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 2311
                    self.match(CPP14Parser.Template)


                self.state = 2314
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitinstantiation" ):
                return visitor.visitExplicitinstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Extern:
                self.state = 2318
                self.match(CPP14Parser.Extern)


            self.state = 2321
            self.match(CPP14Parser.Template)
            self.state = 2322
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitspecialization" ):
                return visitor.visitExplicitspecialization(self)
            else:
                return visitor.visitChildren(self)




    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.match(CPP14Parser.Template)
            self.state = 2325
            self.match(CPP14Parser.Less)
            self.state = 2326
            self.match(CPP14Parser.Greater)
            self.state = 2327
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryblock" ):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)




    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self.match(CPP14Parser.Try)
            self.state = 2330
            self.compoundstatement()
            self.state = 2331
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiontryblock" ):
                return visitor.visitFunctiontryblock(self)
            else:
                return visitor.visitChildren(self)




    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self.match(CPP14Parser.Try)
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 2334
                self.ctorinitializer()


            self.state = 2337
            self.compoundstatement()
            self.state = 2338
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerseq" ):
                return visitor.visitHandlerseq(self)
            else:
                return visitor.visitChildren(self)




    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.handler()
            self.state = 2342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2341
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler" ):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)




    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.match(CPP14Parser.Catch)
            self.state = 2345
            self.match(CPP14Parser.LeftParen)
            self.state = 2346
            self.exceptiondeclaration()
            self.state = 2347
            self.match(CPP14Parser.RightParen)
            self.state = 2348
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration" ):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration" ):
                listener.exitExceptiondeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration" ):
                return visitor.visitExceptiondeclaration(self)
            else:
                return visitor.visitChildren(self)




    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2350
                    self.attributespecifierseq(0)


                self.state = 2353
                self.typespecifierseq()
                self.state = 2354
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2356
                    self.attributespecifierseq(0)


                self.state = 2359
                self.typespecifierseq()
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2360
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2363
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowexpression" ):
                return visitor.visitThrowexpression(self)
            else:
                return visitor.visitChildren(self)




    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.match(CPP14Parser.Throw)
            self.state = 2368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2367
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext,0)


        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification" ):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification" ):
                listener.exitExceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification" ):
                return visitor.visitExceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptionspecification)
        try:
            self.state = 2372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2370
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2371
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicexceptionspecification" ):
                return visitor.visitDynamicexceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2374
            self.match(CPP14Parser.Throw)
            self.state = 2375
            self.match(CPP14Parser.LeftParen)
            self.state = 2377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (1 << (CPP14Parser.Doublecolon - 69)) | (1 << (CPP14Parser.Identifier - 69)))) != 0):
                self.state = 2376
                self.typeidlist(0)


            self.state = 2379
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist" ):
                listener.enterTypeidlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist" ):
                listener.exitTypeidlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist" ):
                return visitor.visitTypeidlist(self)
            else:
                return visitor.visitChildren(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self.thetypeid()
            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2383
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2386
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2387
                    self.match(CPP14Parser.Comma)
                    self.state = 2388
                    self.thetypeid()
                    self.state = 2390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                    if la_ == 1:
                        self.state = 2389
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification" ):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification" ):
                listener.exitNoexceptspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification" ):
                return visitor.visitNoexceptspecification(self)
            else:
                return visitor.visitChildren(self)




    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_noexceptspecification)
        try:
            self.state = 2403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2397
                self.match(CPP14Parser.Noexcept)
                self.state = 2398
                self.match(CPP14Parser.LeftParen)
                self.state = 2399
                self.constantexpression()
                self.state = 2400
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2402
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShift" ):
                listener.enterRightShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShift" ):
                listener.exitRightShift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightShift" ):
                return visitor.visitRightShift(self)
            else:
                return visitor.visitChildren(self)




    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(CPP14Parser.Greater)
            self.state = 2406
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightShiftAssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShiftAssign" ):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShiftAssign" ):
                listener.exitRightShiftAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightShiftAssign" ):
                return visitor.visitRightShiftAssign(self)
            else:
                return visitor.visitChildren(self)




    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(CPP14Parser.Greater)
            self.state = 2409
            self.match(CPP14Parser.Greater)
            self.state = 2410
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(CPP14Parser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator" ):
                listener.enterTheoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator" ):
                listener.exitTheoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator" ):
                return visitor.visitTheoperator(self)
            else:
                return visitor.visitChildren(self)




    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_theoperator)
        try:
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2412
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2414
                self.match(CPP14Parser.New)
                self.state = 2415
                self.match(CPP14Parser.LeftBracket)
                self.state = 2416
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2417
                self.match(CPP14Parser.Delete)
                self.state = 2418
                self.match(CPP14Parser.LeftBracket)
                self.state = 2419
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2420
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2421
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2422
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2423
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2424
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2425
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2426
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2427
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2428
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2429
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2430
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2431
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2432
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2433
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2434
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2435
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2436
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2437
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2438
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2439
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2440
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2441
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2442
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2443
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2444
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2445
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2446
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2447
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2448
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2449
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2450
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2451
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2452
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2453
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2454
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2455
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2456
                self.match(CPP14Parser.LeftParen)
                self.state = 2457
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2458
                self.match(CPP14Parser.LeftBracket)
                self.state = 2459
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14Parser.BooleanliteralContext,0)


        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14Parser.PointerliteralContext,0)


        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_literal)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Integerliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2462
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [CPP14Parser.Characterliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2463
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [CPP14Parser.Floatingliteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2464
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [CPP14Parser.Stringliteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2465
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [CPP14Parser.FalseToken, CPP14Parser.TrueToken]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2466
                self.booleanliteral()
                pass
            elif token in [CPP14Parser.Nullptr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2467
                self.pointerliteral()
                pass
            elif token in [CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2468
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_booleanliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral" ):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral" ):
                listener.exitBooleanliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral" ):
                return visitor.visitBooleanliteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanliteral(self):

        localctx = CPP14Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_booleanliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.FalseToken or _la==CPP14Parser.TrueToken):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerliteral" ):
                return visitor.visitPointerliteral(self)
            else:
                return visitor.visitChildren(self)




    def pointerliteral(self):

        localctx = CPP14Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(CPP14Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral" ):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral" ):
                listener.exitUserdefinedliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral" ):
                return visitor.visitUserdefinedliteral(self)
            else:
                return visitor.visitChildren(self)




    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_userdefinedliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 135)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 135)) | (1 << (CPP14Parser.Userdefinedstringliteral - 135)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[26] = self.noptrnewdeclarator_sempred
        self._predicates[31] = self.pmexpression_sempred
        self._predicates[32] = self.multiplicativeexpression_sempred
        self._predicates[33] = self.additiveexpression_sempred
        self._predicates[34] = self.shiftexpression_sempred
        self._predicates[35] = self.relationalexpression_sempred
        self._predicates[36] = self.equalityexpression_sempred
        self._predicates[37] = self.andexpression_sempred
        self._predicates[38] = self.exclusiveorexpression_sempred
        self._predicates[39] = self.inclusiveorexpression_sempred
        self._predicates[40] = self.logicalandexpression_sempred
        self._predicates[41] = self.logicalorexpression_sempred
        self._predicates[45] = self.expression_sempred
        self._predicates[52] = self.statementseq_sempred
        self._predicates[61] = self.declarationseq_sempred
        self._predicates[88] = self.enumeratorlist_sempred
        self._predicates[106] = self.attributespecifierseq_sempred
        self._predicates[109] = self.attributelist_sempred
        self._predicates[115] = self.balancedtokenseq_sempred
        self._predicates[117] = self.initdeclaratorlist_sempred
        self._predicates[121] = self.noptrdeclarator_sempred
        self._predicates[132] = self.noptrabstractdeclarator_sempred
        self._predicates[134] = self.noptrabstractpackdeclarator_sempred
        self._predicates[136] = self.parameterdeclarationlist_sempred
        self._predicates[143] = self.initializerlist_sempred
        self._predicates[153] = self.memberdeclaratorlist_sempred
        self._predicates[155] = self.virtspecifierseq_sempred
        self._predicates[159] = self.basespecifierlist_sempred
        self._predicates[174] = self.templateparameterlist_sempred
        self._predicates[180] = self.templateargumentlist_sempred
        self._predicates[193] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         




